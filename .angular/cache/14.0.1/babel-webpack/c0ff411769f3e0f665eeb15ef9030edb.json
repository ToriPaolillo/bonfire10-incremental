{"ast":null,"code":"import { Tile } from \"./tile\";\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nexport let GridMatrix = /*#__PURE__*/(() => {\n  class GridMatrix {\n    //20 by 20\n    constructor() {\n      let tiles = [];\n      let initialXCoord = Math.round(Math.random() * 16 + 2);\n      let initialYCoord = Math.round(Math.random() * 16 + 2);\n      tiles.push(new Tile(true, false, true, 'player', initialXCoord, initialYCoord)); // Spells\n\n      for (let i = 0; i < 5; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // Gold\n\n\n      for (let i = 0; i < 7; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // stat boosts\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true));\n        tiles.push(new Tile(false, false, true));\n        tiles.push(new Tile(false, false, true));\n      } // stores\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // churches\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // potions\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true));\n        tiles.push(new Tile(false, false, true));\n      } // level 1\n\n\n      for (let i = 0; i < 10; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // level 2\n\n\n      for (let i = 0; i < 5; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // level 3\n\n\n      for (let i = 0; i < 4; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // level 4, 5, 6, 7, 8\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true));\n        tiles.push(new Tile(false, false, true));\n        tiles.push(new Tile(false, false, true));\n        tiles.push(new Tile(false, false, true));\n        tiles.push(new Tile(false, false, true));\n      } // level 9\n\n\n      for (let i = 0; i < 2; i++) {\n        tiles.push(new Tile(false, false, true));\n      } // level 10\n\n\n      tiles.push(new Tile(false, false, true)); // explorable wall tiles\n\n      for (let i = 0; i < 170; i++) {\n        let newtile = new Tile(false, false, false);\n        tiles.push(newtile);\n      } // unexplorable wall tiles\n\n\n      for (let i = 0; i < 50; i++) {\n        let newtile = new Tile(false, false, false);\n        tiles.push(newtile);\n      }\n\n      let remaining = 400 - tiles.length; // walkable empty tiles\n\n      for (let i = 0; i < remaining; i++) {\n        let newtile = new Tile(false, false, true);\n        tiles.push(newtile);\n      }\n\n      let walkableList = _.filter(tiles, function (tile) {\n        return tile.walkable && tile.xCoord == null && tile.yCoord == null;\n      });\n\n      let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\n      let test = walkableCoords;\n      let test2 = 5;\n      test2 = 9;\n      walkableCoords.forEach(coordinate => {\n        if (coordinate.xCoord != initialXCoord && coordinate.yCoord != initialYCoord) {\n          let newTile = this.getRandomTile(walkableList);\n          newTile.xCoord = coordinate.xCoord;\n          newTile.yCoord = coordinate.yCoord;\n        }\n      });\n\n      let unwalkableList = _.filter(tiles, function (tile) {\n        return !tile.walkable && tile.xCoord == null && tile.yCoord == null;\n      });\n\n      this.setUnwalkableTileCoords(walkableCoords, unwalkableList);\n      tiles = this.formatMatrix(tiles);\n      this.tileArray = tiles;\n    }\n\n    getRandomTile(tileList) {\n      let randomIndex = Math.round(Math.random() * (tileList.length - 1));\n      let randomTile = tileList[randomIndex];\n\n      if (randomTile.xCoord == null || randomTile.yCoord == null) {\n        return randomTile;\n      } else {\n        return this.getRandomCoordinate(tileList);\n      }\n    }\n\n    getWalkablePath(xCoord, yCoord, tileNumber) {\n      let tileCoords = [{\n        xCoord: xCoord,\n        yCoord: yCoord\n      }];\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord + 1\n      });\n\n      for (let i = 0; i < tileNumber - 9; i++) {\n        let currentCoord = this.getRandomCoordinate(tileCoords);\n        let expansionCoordinate = this.getNewCoordinate(currentCoord, tileCoords);\n        tileCoords.push(expansionCoordinate);\n      }\n\n      return tileCoords;\n    }\n\n    getRandomCoordinate(coordinates) {\n      let currentCoordIndex = coordinates.length - 1 - Math.round(Math.random() * 4);\n      let currentCoord = coordinates[currentCoordIndex];\n      let surrounded = this.isSurrounded(currentCoord, coordinates);\n\n      if (surrounded) {\n        return this.getRandomCoordinate(coordinates);\n      } else {\n        return currentCoord;\n      }\n    }\n\n    isSurrounded(currentCoord, coordinates) {\n      let surrounded = (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.xCoord - 1 < 0 || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord + 1 > 19 || currentCoord.xCoord - 1 < 0);\n      return surrounded;\n    }\n\n    getNewCoordinate(currentCoord, coordinates) {\n      let newXCoord = currentCoord.xCoord + Math.round(Math.random() * 2 - 1);\n      let newYCoord = currentCoord.yCoord + Math.round(Math.random() * 2 - 1);\n\n      let included = _.find(coordinates, {\n        xCoord: newXCoord,\n        yCoord: newYCoord\n      });\n\n      if (currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\n        return this.getNewCoordinate(currentCoord, coordinates);\n      } else {\n        return {\n          xCoord: newXCoord,\n          yCoord: newYCoord\n        };\n      }\n    }\n\n    setUnwalkableTileCoords(walkableCoords, unwalkableTiles) {\n      let unwalkableCoords = [];\n\n      for (let i = 0; i < 20; i++) {\n        for (let j = 0; j < 20; j++) {\n          if (_.find(walkableCoords, {\n            xCoord: i,\n            yCoord: j\n          }) == null) {\n            unwalkableCoords.push({\n              xCoord: i,\n              yCoord: j\n            });\n          }\n        }\n      }\n\n      for (let i = 0; i < unwalkableTiles.length; i++) {\n        unwalkableTiles[i].xCoord = unwalkableCoords[i].xCoord;\n        unwalkableTiles[i].yCoord = unwalkableCoords[i].yCoord;\n      }\n    }\n\n    formatMatrix(tiles) {\n      let tileArray = [];\n\n      for (let i = 0; i < 20; i++) {\n        let innerArray = [];\n\n        for (let j = 0; j < 20; j++) {\n          tiles.forEach(tile => {\n            if (tile.xCoord == i && tile.yCoord == j) {\n              innerArray.push(tile);\n            }\n          });\n        }\n\n        tileArray.push(innerArray);\n      }\n\n      return tileArray;\n    }\n\n  }\n\n  GridMatrix.ɵfac = function GridMatrix_Factory(t) {\n    return new (t || GridMatrix)();\n  };\n\n  GridMatrix.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GridMatrix,\n    factory: GridMatrix.ɵfac\n  });\n  return GridMatrix;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\models\\gridMatrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Tile } from \"./tile\";\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable()\r\nexport class GridMatrix {\r\n    tileArray;\r\n\r\n    //20 by 20\r\n\r\n    constructor() {\r\n\r\n        let tiles = [];\r\n        let initialXCoord = Math.round(Math.random() * 16 + 2);\r\n        let initialYCoord = Math.round(Math.random() * 16 + 2);\r\n        tiles.push(new Tile(true, false, true, 'player', initialXCoord, initialYCoord))\r\n\r\n        // Spells\r\n        for (let i = 0; i < 5; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // Gold\r\n        for (let i = 0; i < 7; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // stat boosts\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n            tiles.push(new Tile(false, false, true));\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // stores\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // churches\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // potions\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n\r\n        // level 1\r\n        for (let i = 0; i < 10; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // level 2\r\n        for (let i = 0; i < 5; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // level 3\r\n        for (let i = 0; i < 4; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // level 4, 5, 6, 7, 8\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n            tiles.push(new Tile(false, false, true));\r\n            tiles.push(new Tile(false, false, true));\r\n            tiles.push(new Tile(false, false, true));\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // level 9\r\n        for (let i = 0; i < 2; i++) {\r\n            tiles.push(new Tile(false, false, true));\r\n        }\r\n        // level 10\r\n        tiles.push(new Tile(false, false, true));\r\n\r\n        // explorable wall tiles\r\n        for (let i = 0; i < 170; i++) {\r\n            let newtile = new Tile(false, false, false);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // unexplorable wall tiles\r\n        for (let i = 0; i < 50; i++) {\r\n            let newtile = new Tile(false, false, false);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        let remaining = 400 - tiles.length;\r\n        // walkable empty tiles\r\n        for (let i = 0; i < remaining; i++) {\r\n            let newtile = new Tile(false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n\r\n\r\n        let walkableList = _.filter(tiles, function (tile) {\r\n            return tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n        });\r\n\r\n        let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\r\n\r\n\r\n        let test = walkableCoords;\r\n        let test2 = 5;\r\n        test2 = 9;\r\n\r\n        walkableCoords.forEach(coordinate => {\r\n            if (coordinate.xCoord != initialXCoord && coordinate.yCoord != initialYCoord) {\r\n                let newTile = this.getRandomTile(walkableList)\r\n                newTile.xCoord = coordinate.xCoord;\r\n                newTile.yCoord = coordinate.yCoord;\r\n            }\r\n        })\r\n\r\n        let unwalkableList = _.filter(tiles, function (tile) {\r\n            return !tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n        });\r\n        \r\n        \r\n        \r\n        this.setUnwalkableTileCoords(walkableCoords, unwalkableList);\r\n        tiles = this.formatMatrix(tiles);\r\n\r\n\r\n        this.tileArray = tiles;\r\n    }\r\n\r\n    getRandomTile(tileList) {\r\n        let randomIndex = Math.round(Math.random() * (tileList.length - 1))\r\n        let randomTile = tileList[randomIndex];\r\n        if (randomTile.xCoord == null || randomTile.yCoord == null) {\r\n            return randomTile\r\n        } else {\r\n            return this.getRandomCoordinate(tileList)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private getWalkablePath(xCoord, yCoord, tileNumber) {\r\n        let tileCoords = [{ xCoord: xCoord, yCoord: yCoord }];\r\n\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord + 1 });\r\n\r\n        for (let i = 0; i < tileNumber - 9; i++) {\r\n\r\n            let currentCoord = this.getRandomCoordinate(tileCoords);\r\n            let expansionCoordinate = this.getNewCoordinate(currentCoord, tileCoords);\r\n            tileCoords.push(expansionCoordinate);\r\n        }\r\n\r\n        return tileCoords;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getRandomCoordinate(coordinates) {\r\n        let currentCoordIndex = (coordinates.length - 1) - Math.round(Math.random() * 4);\r\n        let currentCoord = coordinates[currentCoordIndex]\r\n\r\n\r\n        let surrounded = this.isSurrounded(currentCoord, coordinates);\r\n\r\n\r\n        if (surrounded) {\r\n            return this.getRandomCoordinate(coordinates);\r\n        } else {\r\n            return currentCoord;\r\n        }\r\n    }\r\n\r\n    isSurrounded(currentCoord, coordinates) {\r\n        let surrounded =\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.xCoord - 1 < 0 || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord + 1 > 19 || currentCoord.xCoord - 1 < 0);\r\n\r\n        return surrounded;\r\n    }\r\n\r\n    getNewCoordinate(currentCoord, coordinates) {\r\n        let newXCoord = currentCoord.xCoord + Math.round((Math.random() * 2) - 1);\r\n        let newYCoord = currentCoord.yCoord + Math.round((Math.random() * 2) - 1);\r\n\r\n\r\n        let included = _.find(coordinates, { xCoord: newXCoord, yCoord: newYCoord });\r\n        if ((currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord) || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\r\n            return this.getNewCoordinate(currentCoord, coordinates);\r\n        } else {\r\n            return { xCoord: newXCoord, yCoord: newYCoord }\r\n        }\r\n    }\r\n\r\n\r\n    setUnwalkableTileCoords(walkableCoords, unwalkableTiles) {\r\n        let unwalkableCoords = [];\r\n        for (let i = 0; i < 20; i++) {\r\n            for (let j = 0; j < 20; j++) {\r\n                if(_.find(walkableCoords, {xCoord:i, yCoord:j}) == null){\r\n                    unwalkableCoords.push({xCoord: i, yCoord: j})\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < unwalkableTiles.length; i++){\r\n            unwalkableTiles[i].xCoord = unwalkableCoords[i].xCoord;\r\n            unwalkableTiles[i].yCoord = unwalkableCoords[i].yCoord;\r\n        }\r\n    }\r\n\r\n    formatMatrix(tiles) {\r\n        let tileArray = []\r\n\r\n        for (let i = 0; i < 20; i++) {\r\n            let innerArray = [];\r\n            for (let j = 0; j < 20; j++) {\r\n                tiles.forEach(tile => {\r\n                    if (tile.xCoord == i && tile.yCoord == j) {\r\n                        innerArray.push(tile)\r\n                    }\r\n                })\r\n            }\r\n            tileArray.push(innerArray)\r\n        }\r\n        return tileArray\r\n    }\r\n\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}