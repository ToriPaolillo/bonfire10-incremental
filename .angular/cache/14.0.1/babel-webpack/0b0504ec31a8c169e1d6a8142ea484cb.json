{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Spell } from 'src/app/models/spell';\nimport { Enemy } from 'src/app/models/enemy';\nimport { Shop } from 'src/app/models/shop';\nimport { Altar } from 'src/app/models/altar';\nlet InfoPanelComponent = class InfoPanelComponent {\n  constructor() {\n    this.spellHovered = false;\n    this.spellRecycle = false;\n  }\n\n  ngOnInit() {\n    let that = this;\n  }\n\n  ngOnChanges(changes) {\n    let test = 9;\n  }\n\n  tileIsSpell() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Spell;\n  }\n\n  tileIsEnemy() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Enemy;\n  }\n\n  tileIsAltar() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Altar;\n  }\n\n  tileIsShop() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Shop;\n  }\n\n  tileHasNoInfo() {\n    return !this.tileIsSpell() && !this.tileIsEnemy() && !this.tileIsAltar() && !this.tileIsShop();\n  }\n\n  activateSpell(spell) {\n    if (spell.canCast(this.character)) {\n      spell.activateSpell(this.character);\n    }\n  }\n\n  hoveringSpell(spell) {\n    this.spell = spell;\n\n    if (spell.canCast(this.character)) {\n      this.spellHovered = true;\n    }\n  }\n\n  mouseclickHeld(spell) {\n    spell.canCast(this.character) ? spell.spellBeingClickedSuccess = true : spell.spellBeingClickedFail = true;\n  }\n\n  mouseClickUp(spell) {\n    spell.spellBeingClickedSuccess = false;\n    spell.spellBeingClickedFail = false;\n  }\n\n  manaAfterSpellUse() {\n    if (this.spell.canCast(this.character)) {\n      return (this.character.currentMana - this.spell.manaCost) / this.character.baseMana;\n    }\n\n    return this.character.currentMana / this.character.baseMana;\n  }\n\n  onSpellClick(spell) {\n    if (this.spellRecycle) {\n      this.character.recycleSpell(spell);\n    } else {\n      this.activateSpell(spell);\n    }\n  }\n\n};\n\n__decorate([Input()], InfoPanelComponent.prototype, \"character\", void 0);\n\n__decorate([Input()], InfoPanelComponent.prototype, \"relevantTile\", void 0);\n\nInfoPanelComponent = __decorate([Component({\n  selector: 'infoPanel',\n  templateUrl: './infoPanel.component.html',\n  styleUrls: ['./infoPanel.component.css']\n})], InfoPanelComponent);\nexport { InfoPanelComponent };","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10-incremental\\src\\app\\dungeon\\infoPanel\\infoPanel.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injectable, Input } from '@angular/core';\r\nimport { Character } from 'src/app/models/character';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { Tile } from 'src/app/models/tile';\r\nimport { Spell } from 'src/app/models/spell';\r\nimport { Enemy } from 'src/app/models/enemy';\r\nimport { Shop } from 'src/app/models/shop';\r\nimport { Altar } from 'src/app/models/altar';\r\n\r\n\r\n@Component({\r\n  selector: 'infoPanel',\r\n  templateUrl: './infoPanel.component.html',\r\n  styleUrls: ['./infoPanel.component.css']\r\n})\r\nexport class InfoPanelComponent {\r\n\r\n  @Input() character: Character;\r\n  @Input() relevantTile: Tile;\r\n\r\n  spell: Spell;\r\n  spellHovered = false;\r\n\r\n  spellRecycle = false;\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    let that = this;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    let test = 9;\r\n  }\r\n  tileIsSpell() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Spell)\r\n  }\r\n\r\n  tileIsEnemy() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Enemy)\r\n  }\r\n\r\n  tileIsAltar() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Altar)\r\n  }\r\n\r\n  tileIsShop() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Shop)\r\n  }\r\n\r\n  tileHasNoInfo() {\r\n    return !this.tileIsSpell() && !this.tileIsEnemy() && !this.tileIsAltar() && !this.tileIsShop();\r\n  }\r\n\r\n  activateSpell(spell) {\r\n    if (spell.canCast(this.character)) {\r\n      spell.activateSpell(this.character);\r\n    }\r\n  }\r\n\r\n  hoveringSpell(spell: Spell) {\r\n    this.spell = spell;\r\n    if (spell.canCast(this.character)) {\r\n      this.spellHovered = true;\r\n    }\r\n  }\r\n\r\n  mouseclickHeld(spell: Spell) {\r\n    spell.canCast(this.character) ? spell.spellBeingClickedSuccess = true : spell.spellBeingClickedFail = true;\r\n  }\r\n\r\n  mouseClickUp(spell: Spell) {\r\n    spell.spellBeingClickedSuccess = false\r\n    spell.spellBeingClickedFail = false;\r\n  }\r\n\r\n\r\n  manaAfterSpellUse() {\r\n    if (this.spell.canCast(this.character)) {\r\n      return (this.character.currentMana - this.spell.manaCost) / this.character.baseMana\r\n    }\r\n    return this.character.currentMana / this.character.baseMana;\r\n  }\r\n\r\n  onSpellClick(spell: Spell) {\r\n    if (this.spellRecycle) {\r\n      this.character.recycleSpell(spell);\r\n    } else {\r\n      this.activateSpell(spell);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}