{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./character\";\nexport let Enemy = /*#__PURE__*/(() => {\n  class Enemy {\n    constructor(level, character) {\n      this.pngString = 'MeatMan';\n      this.name = 'Meat Man';\n      this.type = 'Normal';\n      level ? this.level = level : this.level = 8;\n      this.baseStrength = 5;\n      this.bonusStrength = 0;\n      this.baseHealth = 5;\n      this.currentHealth = this.getMaxHealth();\n      this.baseHealthRegen = 1;\n      this.permaFirstStrike = false;\n      level == 10 ? this.levelNumberWidth = 12 : this.levelNumberWidth = 6;\n      this.levelNumberHeight = 10;\n      this.setNextHit(character);\n    }\n\n    getMaxHealth() {\n      return this.baseHealth * this.level;\n    }\n\n    getCurrentAttack() {\n      return this.baseStrength * this.level + this.bonusStrength;\n    }\n\n    getHealthRegen() {\n      return this.level * this.baseHealthRegen;\n    }\n\n    GenerateRandomEnemyType() {}\n\n    setNextHit(character) {\n      if (character.currentHealth <= this.getCurrentAttack()) {\n        this.nextHit = 'DEATH';\n        this.nextHitTextColor = 'red';\n      } else if (this.currentHealth <= character.getCurrentAttack()) {\n        this.nextHit = 'VICTORY';\n        this.nextHitTextColor = 'green';\n      } else {\n        this.nextHit = 'SAFE';\n        this.nextHitTextColor = 'yellow';\n      }\n    }\n\n    combat(character) {\n      this.currentHealth -= character.getCurrentAttack();\n      character.currentHealth -= this.getCurrentAttack();\n\n      if (this.currentHealth <= 0) {\n        this.currentHealth = 0;\n      }\n\n      if (character.currentHealth <= 0) {\n        character.currentHealth = 0;\n      }\n\n      this.setNextHit(character);\n    }\n\n  }\n\n  Enemy.ɵfac = function Enemy_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  Enemy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Enemy,\n    factory: Enemy.ɵfac\n  });\n  return Enemy;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10-incremental\\src\\app\\models\\enemy.ts"],"names":[],"mappings":";;AAIA,WAAa,KAAb;AAAM,QAAO,KAAP,CAAY;AA+BhB,IAAA,WAAA,CAAY,KAAZ,EAA2B,SAA3B,EAA8C;AAC5C,WAAK,SAAL,GAAiB,SAAjB;AACA,WAAK,IAAL,GAAY,UAAZ;AACA,WAAK,IAAL,GAAY,QAAZ;AACA,MAAA,KAAK,GAAG,KAAK,KAAL,GAAa,KAAhB,GAAwB,KAAK,KAAL,GAAa,CAA1C;AACA,WAAK,YAAL,GAAoB,CAApB;AACA,WAAK,aAAL,GAAqB,CAArB;AACA,WAAK,UAAL,GAAkB,CAAlB;AACA,WAAK,aAAL,GAAqB,KAAK,YAAL,EAArB;AACA,WAAK,eAAL,GAAuB,CAAvB;AACA,WAAK,gBAAL,GAAwB,KAAxB;AACA,MAAA,KAAK,IAAI,EAAT,GAAc,KAAK,gBAAL,GAAwB,EAAtC,GAA2C,KAAK,gBAAL,GAAwB,CAAnE;AACA,WAAK,iBAAL,GAAyB,EAAzB;AAEA,WAAK,UAAL,CAAgB,SAAhB;AAED;;AAGD,IAAA,YAAY,GAAA;AACV,aAAO,KAAK,UAAL,GAAkB,KAAK,KAA9B;AACD;;AAED,IAAA,gBAAgB,GAAA;AACd,aAAQ,KAAK,YAAL,GAAoB,KAAK,KAA1B,GAAmC,KAAK,aAA/C;AACD;;AAED,IAAA,cAAc,GAAA;AACZ,aAAO,KAAK,KAAL,GAAa,KAAK,eAAzB;AACD;;AAGD,IAAA,uBAAuB,GAAA,CAEtB;;AAED,IAAA,UAAU,CAAC,SAAD,EAAqB;AAC7B,UAAG,SAAS,CAAC,aAAV,IAA2B,KAAK,gBAAL,EAA9B,EAAsD;AACpD,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,gBAAL,GAAwB,KAAxB;AACD,OAHD,MAGO,IAAG,KAAK,aAAL,IAAsB,SAAS,CAAC,gBAAV,EAAzB,EAAuD;AAC5D,aAAK,OAAL,GAAe,SAAf;AACA,aAAK,gBAAL,GAAwB,OAAxB;AACD,OAHM,MAGD;AACJ,aAAK,OAAL,GAAe,MAAf;AACA,aAAK,gBAAL,GAAwB,QAAxB;AACD;AACF;;AAED,IAAA,MAAM,CAAC,SAAD,EAAqB;AACzB,WAAK,aAAL,IAAsB,SAAS,CAAC,gBAAV,EAAtB;AACA,MAAA,SAAS,CAAC,aAAV,IAA2B,KAAK,gBAAL,EAA3B;;AAEA,UAAG,KAAK,aAAL,IAAsB,CAAzB,EAA2B;AACzB,aAAK,aAAL,GAAqB,CAArB;AACD;;AAED,UAAG,SAAS,CAAC,aAAV,IAA2B,CAA9B,EAAgC;AAC9B,QAAA,SAAS,CAAC,aAAV,GAA0B,CAA1B;AACD;;AACD,WAAK,UAAL,CAAgB,SAAhB;AACD;;AA5Fe;;;;;;;WAAL,K;AAAK,IAAA,OAAA,EAAL,KAAK,CAAA;;AAAlB,SAAa,KAAb;AAAA","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Character } from \"./character\";\r\n\r\n@Injectable()\r\nexport class Enemy {\r\n  //stats\r\n  name; string;\r\n  type: string;\r\n  level: number;\r\n  baseStrength: number;\r\n  bonusStrength: number;\r\n  currentHealth: number;\r\n  baseHealth: number;\r\n  baseHealthRegen: number\r\n  permaFirstStrike: boolean;\r\n\r\n  deathDefiance: boolean;\r\n  petrification: boolean;\r\n\r\n  // negative statuses\r\n  poisoned: boolean;\r\n  weakened: boolean;\r\n  vulernable: boolean;\r\n  physicalResist: boolean;\r\n  magicResist: boolean;\r\n\r\n  // metaData\r\n  pngString: String;\r\n  levelNumberWidth: number;\r\n  levelNumberHeight: number;\r\n  nextHit: string;\r\n  nextHitTextColor: string;\r\n\r\n\r\n\r\n  constructor(level: number, character:Character) {\r\n    this.pngString = 'MeatMan'\r\n    this.name = 'Meat Man'\r\n    this.type = 'Normal'\r\n    level ? this.level = level : this.level = 8;\r\n    this.baseStrength = 5;\r\n    this.bonusStrength = 0;\r\n    this.baseHealth = 5\r\n    this.currentHealth = this.getMaxHealth();\r\n    this.baseHealthRegen = 1\r\n    this.permaFirstStrike = false;\r\n    level == 10 ? this.levelNumberWidth = 12 : this.levelNumberWidth = 6;\r\n    this.levelNumberHeight = 10;\r\n\r\n    this.setNextHit(character);\r\n\r\n  }\r\n\r\n\r\n  getMaxHealth() {\r\n    return this.baseHealth * this.level;\r\n  }\r\n\r\n  getCurrentAttack() {\r\n    return (this.baseStrength * this.level) + this.bonusStrength\r\n  }\r\n\r\n  getHealthRegen() {\r\n    return this.level * this.baseHealthRegen;\r\n  }\r\n\r\n\r\n  GenerateRandomEnemyType(){\r\n\r\n  }\r\n\r\n  setNextHit(character: Character){\r\n    if(character.currentHealth <= this.getCurrentAttack()){\r\n      this.nextHit = 'DEATH';\r\n      this.nextHitTextColor = 'red'\r\n    } else if(this.currentHealth <= character.getCurrentAttack()) {\r\n      this.nextHit = 'VICTORY';\r\n      this.nextHitTextColor = 'green'\r\n    } else{\r\n      this.nextHit = 'SAFE';\r\n      this.nextHitTextColor = 'yellow'\r\n    }\r\n  }\r\n\r\n  combat(character: Character){\r\n    this.currentHealth -= character.getCurrentAttack();\r\n    character.currentHealth -= this.getCurrentAttack();\r\n\r\n    if(this.currentHealth <= 0){\r\n      this.currentHealth = 0;\r\n    }\r\n\r\n    if(character.currentHealth <= 0){\r\n      character.currentHealth = 0;\r\n    }\r\n    this.setNextHit(character);\r\n  }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}