{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Spell } from 'src/app/models/spell';\nimport { Enemy } from 'src/app/models/enemy';\nimport { Shop } from 'src/app/models/shop';\nimport { Altar } from 'src/app/models/altar';\nlet InfoPanelComponent = class InfoPanelComponent {\n  constructor() {\n    this.spellList = [];\n  }\n\n  ngOnInit() {\n    let that = this;\n\n    for (let i = 0; i < this.character.spellSlots; i++) {\n      this.spellList.push(new Spell('empty'));\n    }\n  }\n\n  tileIsSpell() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Spell;\n  }\n\n  tileIsEnemy() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Enemy;\n  }\n\n  tileIsAltar() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Altar;\n  }\n\n  tileIsShop() {\n    return this.relevantTile != null && this.relevantTile.contents != null && this.relevantTile.contents instanceof Shop;\n  }\n\n  tileHasNoInfo() {\n    return !this.tileIsSpell() && !this.tileIsEnemy() && !this.tileIsAltar() && !this.tileIsShop();\n  }\n\n};\n\n__decorate([Input()], InfoPanelComponent.prototype, \"character\", void 0);\n\n__decorate([Input()], InfoPanelComponent.prototype, \"relevantTile\", void 0);\n\nInfoPanelComponent = __decorate([Component({\n  selector: 'infoPanel',\n  templateUrl: './infoPanel.component.html',\n  styleUrls: ['./infoPanel.component.css']\n})], InfoPanelComponent);\nexport { InfoPanelComponent };","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\dungeon\\infoPanel\\infoPanel.component.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,EAAgC,KAAhC,QAA6C,eAA7C;AAIA,SAAS,KAAT,QAAsB,sBAAtB;AACA,SAAS,KAAT,QAAsB,sBAAtB;AACA,SAAS,IAAT,QAAqB,qBAArB;AACA,SAAS,KAAT,QAAsB,sBAAtB;AAQA,IAAa,kBAAkB,GAA/B,MAAa,kBAAb,CAA+B;AAM7B,EAAA,WAAA,GAAA;AADA,SAAA,SAAA,GAAqB,EAArB;AAGC;;AAED,EAAA,QAAQ,GAAA;AACN,QAAI,IAAI,GAAG,IAAX;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,SAAL,CAAe,UAAnC,EAA+C,CAAC,EAAhD,EAAoD;AAClD,WAAK,SAAL,CAAe,IAAf,CAAoB,IAAI,KAAJ,CAAU,OAAV,CAApB;AACD;AAEF;;AAED,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,YAAL,IAAqB,IAArB,IAA6B,KAAK,YAAL,CAAkB,QAAlB,IAA8B,IAA3D,IAAoE,KAAK,YAAL,CAAkB,QAAlB,YAAsC,KAAjH;AACD;;AAED,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,YAAL,IAAqB,IAArB,IAA6B,KAAK,YAAL,CAAkB,QAAlB,IAA8B,IAA3D,IAAoE,KAAK,YAAL,CAAkB,QAAlB,YAAsC,KAAjH;AACD;;AAED,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,YAAL,IAAqB,IAArB,IAA6B,KAAK,YAAL,CAAkB,QAAlB,IAA8B,IAA3D,IAAoE,KAAK,YAAL,CAAkB,QAAlB,YAAsC,KAAjH;AACD;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,YAAL,IAAqB,IAArB,IAA6B,KAAK,YAAL,CAAkB,QAAlB,IAA8B,IAA3D,IAAoE,KAAK,YAAL,CAAkB,QAAlB,YAAsC,IAAjH;AACD;;AAED,EAAA,aAAa,GAAA;AACX,WAAO,CAAC,KAAK,WAAL,EAAD,IAAuB,CAAC,KAAK,WAAL,EAAxB,IAA8C,CAAC,KAAK,WAAL,EAA/C,IAAqE,CAAC,KAAK,UAAL,EAA7E;AACD;;AArC4B,CAA/B;;AAEW,UAAA,CAAA,CAAR,KAAK,EAAG,CAAA,E,4BAAA,E,WAAA,E,KAAqB,CAArB,CAAA;;AACA,UAAA,CAAA,CAAR,KAAK,EAAG,CAAA,E,4BAAA,E,cAAA,E,KAAmB,CAAnB,CAAA;;AAHE,kBAAkB,GAAA,UAAA,CAAA,CAL9B,SAAS,CAAC;AACT,EAAA,QAAQ,EAAE,WADD;AAET,EAAA,WAAW,EAAE,4BAFJ;AAGT,EAAA,SAAS,EAAE,CAAC,2BAAD;AAHF,CAAD,CAKqB,CAAA,EAAlB,kBAAkB,CAAlB;SAAA,kB","sourcesContent":["import { Component, Injectable, Input } from '@angular/core';\r\nimport { Character } from 'src/app/models/character';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { Tile } from 'src/app/models/tile';\r\nimport { Spell } from 'src/app/models/spell';\r\nimport { Enemy } from 'src/app/models/enemy';\r\nimport { Shop } from 'src/app/models/shop';\r\nimport { Altar } from 'src/app/models/altar';\r\n\r\n\r\n@Component({\r\n  selector: 'infoPanel',\r\n  templateUrl: './infoPanel.component.html',\r\n  styleUrls: ['./infoPanel.component.css']\r\n})\r\nexport class InfoPanelComponent {\r\n\r\n  @Input() character: Character;\r\n  @Input() relevantTile: Tile;\r\n\r\n  spellList: Spell[] = [];\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    let that = this;\r\n\r\n    for (let i = 0; i < this.character.spellSlots; i++) {\r\n      this.spellList.push(new Spell('empty'));\r\n    }\r\n\r\n  }\r\n\r\n  tileIsSpell() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Spell)\r\n  }\r\n\r\n  tileIsEnemy() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Enemy)\r\n  }\r\n\r\n  tileIsAltar() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Altar)\r\n  }\r\n\r\n  tileIsShop() {\r\n    return this.relevantTile != null && this.relevantTile.contents != null && (this.relevantTile.contents instanceof Shop)\r\n  }\r\n\r\n  tileHasNoInfo() {\r\n    return !this.tileIsSpell() && !this.tileIsEnemy() && !this.tileIsAltar() && !this.tileIsShop();\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}