{"ast":null,"code":"import { Tile } from \"./tile\";\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nexport let GridMatrix = /*#__PURE__*/(() => {\n  class GridMatrix {\n    //20 by 20\n    constructor() {\n      let tiles = [];\n      let initialXCoord = Math.round(Math.random() * 16 + 2);\n      let initialYCoord = Math.round(Math.random() * 16 + 2);\n      tiles.push(new Tile(true, false, false, true, 'player', initialXCoord, initialYCoord)); // walkable empty tiles\n\n      for (let i = 0; i < 180; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // Spells\n\n\n      for (let i = 0; i < 5; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // Gold\n\n\n      for (let i = 0; i < 7; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // stat boosts\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // stores\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // churches\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // potions\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 1\n\n\n      for (let i = 0; i < 10; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 2\n\n\n      for (let i = 0; i < 5; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 3\n\n\n      for (let i = 0; i < 4; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 4, 5, 6, 7, 8\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 9\n\n\n      for (let i = 0; i < 2; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 10\n      // explorable wall tiles\n\n\n      for (let i = 0; i < 170; i++) {\n        let newtile = new Tile(false, false, true, true);\n        tiles.push(newtile);\n      } // unexplorable wall tiles\n\n\n      for (let i = 0; i < 50; i++) {\n        let newtile = new Tile(false, false, true, false);\n        tiles.push(newtile);\n      }\n\n      let remaining = 400 - tiles.length; // walkable empty tiles\n\n      for (let i = 0; i < remaining; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      }\n\n      let walkableList = _.filter(tiles, function (tile) {\n        return tile.walkable && tile.xCoord == null && tile.yCoord == null;\n      });\n\n      let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\n      walkableCoords.forEach(coordinate => {\n        let newTile = this.getRandomTile(walkableList);\n        newTile.xCoord = coordinate.xCoord;\n        newTile.yCoord = coordinate.yCoord;\n      });\n      this.tileArray = tiles;\n    }\n\n    getRandomTile(tileList) {\n      let randomIndex = Math.round(Math.random() * tileList.length);\n      let randomTile = tileList[randomIndex];\n\n      if (randomTile.xCoord == null || randomTile.yCoord == null) {\n        return randomTile;\n      } else {\n        return this.getRandomCoordinate(tileList);\n      }\n    }\n\n    getWalkablePath(xCoord, yCoord, tileNumber) {\n      let tileCoords = [{\n        xCoord: xCoord,\n        yCoord: yCoord\n      }];\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord + 1\n      });\n\n      for (let i = 0; i < tileNumber - 9; i++) {\n        let currentCoord = this.getRandomCoordinate(tileCoords);\n        let expansionCoordinate = this.getNewCoordinate(currentCoord, tileCoords);\n        tileCoords.push(expansionCoordinate);\n      }\n\n      return tileCoords;\n    }\n\n    getRandomCoordinate(coordinates) {\n      let currentCoordIndex = Math.round(Math.random() * coordinates.length);\n      let currentCoord = coordinates[currentCoordIndex];\n\n      let surrounded = _.includes(coordinates, function (coordinate) {\n        return coordinate == {\n          xCoord: currentCoord.xCoord + 1,\n          yCoord: currentCoord.yCoord\n        } || coordinate == {\n          xCoord: currentCoord.xCoord,\n          yCoord: currentCoord.yCoord + 1\n        } || coordinate == {\n          xCoord: currentCoord.xCoord + 1,\n          yCoord: currentCoord.yCoord + 1\n        } || coordinate == {\n          xCoord: currentCoord.xCoord - 1,\n          yCoord: currentCoord.yCoord\n        } || coordinate == {\n          xCoord: currentCoord.xCoord,\n          yCoord: currentCoord.yCoord - 1\n        } || coordinate == {\n          xCoord: currentCoord.xCoord - 1,\n          yCoord: currentCoord.yCoord - 1\n        } || coordinate == {\n          xCoord: currentCoord.xCoord + 1,\n          yCoord: currentCoord.yCoord - 1\n        } || coordinate == {\n          xCoord: currentCoord.xCoord - 1,\n          yCoord: currentCoord.yCoord + 1\n        };\n      });\n\n      if (surrounded) {\n        return this.getRandomCoordinate(coordinates);\n      } else {\n        return currentCoord;\n      }\n    }\n\n    getNewCoordinate(currentCoord, coordinates) {\n      if (currentCoord == null || currentCoord.xCoord == null || currentCoord.yCoord == null) {\n        let test = 9;\n        test = 8;\n      }\n\n      let newXCoord = currentCoord.xCoord + Math.round(Math.random() * 2 - 1);\n      let newYCoord = currentCoord.yCoord + Math.round(Math.random() * 2 - 1);\n\n      if (currentCoord == {\n        xCoord: newXCoord,\n        yCoord: newYCoord\n      } || _.includes(coordinates, {\n        xCoord: newXCoord,\n        yCoord: newYCoord\n      })) {\n        let coord = this.getNewCoordinate(currentCoord, coordinates);\n        return coord;\n      } else {\n        return {\n          xCoord: newXCoord,\n          yCoord: newYCoord\n        };\n      }\n    }\n\n  }\n\n  GridMatrix.ɵfac = function GridMatrix_Factory(t) {\n    return new (t || GridMatrix)();\n  };\n\n  GridMatrix.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GridMatrix,\n    factory: GridMatrix.ɵfac\n  });\n  return GridMatrix;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\models\\gridMatrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Tile } from \"./tile\";\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable()\r\nexport class GridMatrix {\r\n    tileArray;\r\n\r\n    //20 by 20\r\n\r\n    constructor() {\r\n\r\n        let tiles = [];\r\n        let initialXCoord = Math.round(Math.random() * 16 + 2);\r\n        let initialYCoord = Math.round(Math.random() * 16 + 2);\r\n        tiles.push(new Tile(true, false, false, true, 'player', initialXCoord, initialYCoord))\r\n\r\n        // walkable empty tiles\r\n        for (let i = 0; i < 180; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // Spells\r\n        for (let i = 0; i < 5; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // Gold\r\n        for (let i = 0; i < 7; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // stat boosts\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // stores\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // churches\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // potions\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // level 1\r\n        for (let i = 0; i < 10; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 2\r\n        for (let i = 0; i < 5; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 3\r\n        for (let i = 0; i < 4; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 4, 5, 6, 7, 8\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 9\r\n        for (let i = 0; i < 2; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 10\r\n\r\n        // explorable wall tiles\r\n        for (let i = 0; i < 170; i++) {\r\n            let newtile = new Tile(false, false, true, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // unexplorable wall tiles\r\n        for (let i = 0; i < 50; i++) {\r\n            let newtile = new Tile(false, false, true, false);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        let remaining = 400 - tiles.length;\r\n        // walkable empty tiles\r\n        for (let i = 0; i < remaining; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n\r\n\r\n        let walkableList = _.filter(tiles, function (tile) {\r\n            return tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n        });\r\n\r\n        let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\r\n\r\n\r\n\r\n        walkableCoords.forEach(coordinate => {\r\n            let newTile = this.getRandomTile(walkableList)\r\n            newTile.xCoord = coordinate.xCoord;\r\n            newTile.yCoord = coordinate.yCoord;\r\n        })\r\n\r\n\r\n\r\n        this.tileArray = tiles;\r\n    }\r\n\r\n    getRandomTile(tileList) {\r\n        let randomIndex = Math.round(Math.random() * tileList.length)\r\n        let randomTile = tileList[randomIndex];\r\n        if (randomTile.xCoord == null || randomTile.yCoord == null){\r\n            return randomTile\r\n        } else {\r\n            return this.getRandomCoordinate(tileList)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private getWalkablePath(xCoord, yCoord, tileNumber) {\r\n        let tileCoords = [{ xCoord: xCoord, yCoord: yCoord }];\r\n\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord + 1 });\r\n\r\n        for (let i = 0; i < tileNumber - 9; i++) {\r\n\r\n            let currentCoord = this.getRandomCoordinate(tileCoords);\r\n            let expansionCoordinate = this.getNewCoordinate(currentCoord, tileCoords);\r\n            tileCoords.push(expansionCoordinate);\r\n        }\r\n\r\n        return tileCoords;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    getRandomCoordinate(coordinates) {\r\n        let currentCoordIndex = Math.round(Math.random() * coordinates.length);\r\n        let currentCoord = coordinates[currentCoordIndex]\r\n\r\n        let surrounded = _.includes(coordinates, function (coordinate) {\r\n            return coordinate == { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord } ||\r\n                coordinate == { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord + 1 } ||\r\n                coordinate == { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord + 1 } ||\r\n                coordinate == { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord } ||\r\n                coordinate == { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord - 1 } ||\r\n                coordinate == { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord - 1 } ||\r\n                coordinate == { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord - 1 } ||\r\n                coordinate == { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord + 1 }\r\n        })\r\n\r\n        if (surrounded) {\r\n            return this.getRandomCoordinate(coordinates);\r\n        } else {\r\n            return currentCoord;\r\n        }\r\n    }\r\n\r\n    getNewCoordinate(currentCoord, coordinates) {\r\n        if(currentCoord == null || currentCoord.xCoord == null || currentCoord.yCoord == null){\r\n            let test = 9;\r\n            test = 8;\r\n        }\r\n        let newXCoord = currentCoord.xCoord + Math.round((Math.random() * 2) - 1);\r\n        let newYCoord = currentCoord.yCoord + Math.round((Math.random() * 2 )- 1);\r\n\r\n        if (currentCoord == { xCoord: newXCoord, yCoord: newYCoord } || _.includes(coordinates, { xCoord: newXCoord, yCoord: newYCoord })) {\r\n            let coord = this.getNewCoordinate(currentCoord, coordinates);\r\n            return coord;\r\n        } else {\r\n            return { xCoord: newXCoord, yCoord: newYCoord }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}