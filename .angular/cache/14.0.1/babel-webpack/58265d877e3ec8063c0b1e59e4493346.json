{"ast":null,"code":"import { Tile } from \"./tile\";\nimport * as _ from 'lodash';\nimport { Spell } from \"./spell\";\nimport { Enemy } from \"./enemy\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./character\";\nexport let GridMatrix = /*#__PURE__*/(() => {\n  class GridMatrix {\n    //20 by 20\n    constructor(character) {\n      let tiles = [];\n      let initialXCoord = Math.round(Math.random() * 16 + 2);\n      let initialYCoord = Math.round(Math.random() * 16 + 2);\n      tiles.push(new Tile(true, false, true, 'player', initialXCoord, initialYCoord)); // Spells\n\n      let fireBall = new Spell('fireBall');\n      tiles.push(new Tile(false, false, true, fireBall));\n      let excludeList = [fireBall];\n\n      for (let i = 0; i < character.spellsOnMap - 1; i++) {\n        let newSpell = this.getRandomSpell(excludeList);\n\n        if (newSpell instanceof Spell) {\n          excludeList.push(newSpell);\n        }\n\n        tiles.push(new Tile(false, false, true, newSpell));\n      } // Gold\n\n\n      for (let i = 0; i < 7; i++) {\n        tiles.push(new Tile(false, false, true, 'gold'));\n      } // stat boosts\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'strengthBoost'));\n        tiles.push(new Tile(false, false, true, 'healthBoost'));\n        tiles.push(new Tile(false, false, true, 'manaBoost'));\n      } // shops\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'shop'));\n      } // churches\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'altar'));\n      } // potions\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'healthPotion'));\n        tiles.push(new Tile(false, false, true, 'manaPotion'));\n      } // level 1\n\n\n      for (let i = 0; i < 10; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy1'));\n      } // level 2\n\n\n      for (let i = 0; i < 5; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy2'));\n      } // level 3\n\n\n      for (let i = 0; i < 4; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy3'));\n      } // level 4, 5, 6, 7, 8\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy4'));\n        tiles.push(new Tile(false, false, true, 'enemy5'));\n        tiles.push(new Tile(false, false, true, 'enemy6'));\n        tiles.push(new Tile(false, false, true, 'enemy7'));\n        tiles.push(new Tile(false, false, true, 'enemy8'));\n      } // level 9\n\n\n      for (let i = 0; i < 2; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy9'));\n      } // level 10\n\n\n      tiles.push(new Tile(false, false, true, 'enemy10')); // explorable wall tiles\n\n      for (let i = 0; i < 150; i++) {\n        let newtile = new Tile(false, false, false, 'wall');\n        tiles.push(newtile);\n      } // unexplorable wall tiles\n\n\n      for (let i = 0; i < 50; i++) {\n        let newtile = new Tile(false, false, false, 'wall');\n        tiles.push(newtile);\n      }\n\n      let remaining = 400 - tiles.length; // walkable empty tiles\n\n      for (let i = 0; i < remaining; i++) {\n        let newtile = new Tile(false, false, true, 'empty');\n        tiles.push(newtile);\n      }\n\n      let walkableList = _.filter(tiles, function (tile) {\n        return tile.walkable;\n      });\n\n      let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\n      walkableCoords.forEach(coordinate => {\n        if (!(coordinate.xCoord == initialXCoord && coordinate.yCoord == initialYCoord)) {\n          let unsetTiles = _.filter(walkableList, function (tile) {\n            return tile.walkable && tile.xCoord == null && tile.yCoord == null;\n          });\n\n          let newTile = this.getRandomTile(unsetTiles);\n\n          if (this.coordinateTouchingStart(initialXCoord, initialYCoord, coordinate)) {\n            newTile.explored = true;\n          }\n\n          newTile.xCoord = coordinate.xCoord;\n          newTile.yCoord = coordinate.yCoord;\n        }\n      });\n\n      let unwalkableList = _.filter(tiles, function (tile) {\n        return !tile.walkable && tile.xCoord == null && tile.yCoord == null;\n      });\n\n      this.setUnwalkableTileCoords(walkableCoords, unwalkableList);\n      tiles = this.formatMatrix(tiles);\n      this.tileArray = tiles;\n    }\n\n    getRandomSpell(excludelist) {\n      let spellnum = Math.round(Math.random() * 12);\n\n      switch (spellnum) {\n        case 0:\n          if (_.find(excludelist, {\n            name: 'Poison'\n          }) == null) {\n            return new Spell('poison');\n          }\n\n        case 1:\n          if (_.find(excludelist, {\n            name: 'Blood Magic'\n          }) == null) {\n            return new Spell('bloodMagic');\n          }\n\n        case 2:\n          if (_.find(excludelist, {\n            name: 'Might'\n          }) == null) {\n            return new Spell('might');\n          }\n\n        case 3:\n          if (_.find(excludelist, {\n            name: 'Death Defy'\n          }) == null) {\n            return new Spell('deathDefy');\n          }\n\n        case 4:\n          if (_.find(excludelist, {\n            name: 'Destroy Wall'\n          }) == null) {\n            return new Spell('destroyWall');\n          }\n\n        case 5:\n          if (_.find(excludelist, {\n            name: 'First Strike'\n          }) == null) {\n            return new Spell('firstStrike');\n          }\n\n        case 6:\n          if (_.find(excludelist, {\n            name: 'Heal'\n          }) == null) {\n            return new Spell('heal');\n          }\n\n        case 7:\n          if (_.find(excludelist, {\n            name: 'Petrify'\n          }) == null) {\n            return new Spell('petrify');\n          }\n\n        case 8:\n          if (_.find(excludelist, {\n            name: 'Reveal'\n          }) == null) {\n            return new Spell('reveal');\n          }\n\n        case 9:\n          if (_.find(excludelist, {\n            name: 'Teleport Monster'\n          }) == null) {\n            return new Spell('teleportMonster');\n          }\n\n        case 10:\n          if (_.find(excludelist, {\n            name: 'Teleport'\n          }) == null) {\n            return new Spell('teleport');\n          }\n\n        case 11:\n          if (_.find(excludelist, {\n            name: 'Summon'\n          }) == null) {\n            return new Spell('summon');\n          }\n\n        case 12:\n          if (_.find(excludelist, {\n            name: 'Fire Ball'\n          }) == null) {\n            return new Spell('fireBall');\n          }\n\n        default:\n          break;\n      }\n\n      return 'spell';\n    }\n\n    getRandomTile(tileList) {\n      let randomIndex = Math.round(Math.random() * (tileList.length - 1));\n      let randomTile = tileList[randomIndex];\n\n      if (randomTile.xCoord == null || randomTile.yCoord == null) {\n        return randomTile;\n      }\n    }\n\n    getWalkablePath(xCoord, yCoord, tileNumber) {\n      let tileCoords = [{\n        xCoord: xCoord,\n        yCoord: yCoord\n      }];\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord\n      });\n      let currentCoord; //currentCoord = this.getRandomCoordinate(tileCoords, xCoord, yCoord);\n\n      for (let i = 0; i < tileNumber - 9; i++) {\n        if (i >= 20 && i % 20 == 0) {\n          currentCoord = this.getRandomCoordinate(tileCoords, 15, 0);\n        } else {\n          currentCoord = this.getRandomCoordinate(tileCoords, null, 0);\n        }\n\n        if (i == tileNumber / 3) {\n          let xCoords = _.map(tileCoords, 'xCoord');\n\n          let yCoords = _.map(tileCoords, 'yCoord');\n\n          let mostCommonX = _.head(_(xCoords).countBy().entries().maxBy(_.last));\n\n          mostCommonX = 19 - mostCommonX;\n\n          let mostCommonY = _.head(_(yCoords).countBy().entries().maxBy(_.last));\n\n          mostCommonY = 19 - mostCommonY;\n          currentCoord = {\n            xCoord: mostCommonX,\n            yCoord: mostCommonY\n          };\n        }\n\n        let expansionCoordinate = this.getNewCoordinate(currentCoord, tileCoords, 0);\n        currentCoord = expansionCoordinate;\n        tileCoords.push(expansionCoordinate);\n      }\n\n      return tileCoords;\n    }\n\n    getRandomCoordinate(coordinates, refresh, recursionCount) {\n      if (recursionCount >= 15) {\n        refresh = 1;\n      }\n\n      let currentCoordIndex = coordinates.length - 1 - Math.round(Math.random() * 4);\n\n      if (refresh != null) {\n        currentCoordIndex = Math.round(Math.random() * (coordinates.length - refresh));\n      }\n\n      let currentCoord = coordinates[currentCoordIndex];\n      let surrounded = this.isSurrounded(currentCoord, coordinates);\n\n      if (surrounded) {\n        return this.getRandomCoordinate(coordinates, refresh, recursionCount + 1);\n      } else {\n        return currentCoord;\n      }\n    }\n\n    isSurrounded(currentCoord, coordinates) {\n      let surrounded = (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.xCoord - 1 < 0 || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord + 1 > 19 || currentCoord.xCoord - 1 < 0);\n      return surrounded;\n    }\n\n    coordinateTouchingStart(initialXCoord, initialYCoord, coordinate) {\n      if ((coordinate.xCoord == initialXCoord + 1 || coordinate.xCoord == initialXCoord - 1 || coordinate.xCoord == initialXCoord) && (coordinate.yCoord == initialYCoord + 1 || coordinate.yCoord == initialYCoord - 1 || coordinate.yCoord == initialYCoord)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    getNewCoordinate(currentCoord, coordinates, recursionCount) {\n      if (recursionCount >= 15) {\n        currentCoord = this.getRandomCoordinate(coordinates, 1, 0);\n        recursionCount = 0;\n      }\n\n      let xBias = 1;\n      let yBias = 1;\n      let xBiasPos = false;\n      let xBiasNeg = false;\n      let yBiasPos = false;\n      let yBiasNeg = false;\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord == 19) {\n        xBiasNeg = true;\n        xBias = -1;\n      }\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord == 0) {\n        xBias = 1;\n        xBiasPos = true;\n      }\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord == 19) {\n        yBias = -1;\n        yBiasNeg = true;\n      }\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.yCoord == 0) {\n        yBias = 1;\n        yBiasPos = true;\n      }\n\n      let xRand = Math.random();\n      let yRand = Math.random();\n\n      if (xBiasNeg && xBiasPos) {\n        if (xRand > 0.95) {\n          xBias = xBias * -1;\n        }\n\n        if (xRand < 0.90) {\n          xBias = xBias * 0;\n        }\n      } else {\n        if (xRand > 0.80) {\n          xBias = xBias * -1;\n        }\n\n        if (xRand < 0.20) {\n          xBias = xBias * 0;\n        }\n      }\n\n      if (yBiasNeg && yBiasPos) {\n        if (yRand > 0.95) {\n          yBias = yBias * -1;\n        }\n\n        if (xRand < 0.90) {\n          yBias = yBias * 0;\n        }\n      } else {\n        if (yRand > 0.80) {\n          yBias = yBias * -1;\n        }\n\n        if (yRand < 0.20) {\n          yBias = yBias * 0;\n        }\n      }\n\n      let newXCoord = currentCoord.xCoord + xBias;\n      let newYCoord = currentCoord.yCoord + yBias;\n\n      let included = _.find(coordinates, {\n        xCoord: newXCoord,\n        yCoord: newYCoord\n      });\n\n      if (currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\n        return this.getNewCoordinate(currentCoord, coordinates, recursionCount + 1);\n      } else {\n        return {\n          xCoord: newXCoord,\n          yCoord: newYCoord\n        };\n      }\n    }\n\n    setUnwalkableTileCoords(walkableCoords, unwalkableTiles) {\n      let unwalkableCoords = [];\n\n      for (let i = 0; i < 20; i++) {\n        for (let j = 0; j < 20; j++) {\n          if (_.find(walkableCoords, {\n            xCoord: i,\n            yCoord: j\n          }) == null) {\n            unwalkableCoords.push({\n              xCoord: i,\n              yCoord: j\n            });\n          }\n        }\n      }\n\n      for (let i = 0; i < unwalkableTiles.length; i++) {\n        unwalkableTiles[i].xCoord = unwalkableCoords[i].xCoord;\n        unwalkableTiles[i].yCoord = unwalkableCoords[i].yCoord;\n      }\n    }\n\n    formatMatrix(tiles) {\n      let tileArray = [];\n\n      for (let i = 0; i < 20; i++) {\n        let innerArray = [];\n\n        for (let j = 0; j < 20; j++) {\n          tiles.forEach(tile => {\n            if (tile.xCoord == i && tile.yCoord == j) {\n              innerArray.push(tile);\n            }\n          });\n        }\n\n        tileArray.push(innerArray);\n      }\n\n      return tileArray;\n    }\n\n    getPlayerTile() {\n      let playerTile;\n      this.tileArray.forEach(row => {\n        row.forEach(tile => {\n          if (tile.contents == 'player' || tile.playerAndContent) {\n            playerTile = tile;\n          }\n        });\n      });\n      return playerTile;\n    }\n\n    clickedTile(clickedTile, character) {\n      let playerTile = this.getPlayerTile();\n\n      if (playerTile.contents == 'player') {\n        playerTile.contents = 'empty';\n      }\n\n      if (playerTile.playerAndContent) {\n        playerTile.playerAndContent = false;\n      }\n\n      let updateInfoPanel = false;\n\n      if (clickedTile.contents instanceof Spell || clickedTile.contents instanceof Enemy) {\n        updateInfoPanel = true;\n      }\n\n      this.clickAction(clickedTile, character);\n      let x = clickedTile.xCoord;\n      let y = clickedTile.yCoord;\n      let top = true;\n      let bot = true;\n      let left = true;\n      let right = true;\n\n      if (x + 1 > 19) {\n        right = false;\n      }\n\n      if (x - 1 < 0) {\n        left = false;\n      }\n\n      if (y + 1 > 19) {\n        top = false;\n      }\n\n      if (y - 1 < 0) {\n        bot = false;\n      }\n\n      if (right) {\n        if (!this.tileArray[x + 1][y].explored) {\n          this.tileArray[x + 1][y].explored = true;\n          character.exploredSquare();\n        }\n\n        if (top) {\n          if (!this.tileArray[x + 1][y + 1].explored) {\n            this.tileArray[x + 1][y + 1].explored = true;\n            character.exploredSquare();\n          }\n        }\n\n        if (bot) {\n          if (!this.tileArray[x + 1][y - 1].explored) {\n            this.tileArray[x + 1][y - 1].explored = true;\n            character.exploredSquare();\n          }\n        }\n      }\n\n      if (left) {\n        if (!this.tileArray[x - 1][y].explored) {\n          this.tileArray[x - 1][y].explored = true;\n          character.exploredSquare();\n        }\n\n        if (top) {\n          if (!this.tileArray[x - 1][y + 1].explored) {\n            this.tileArray[x - 1][y + 1].explored = true;\n            character.exploredSquare();\n          }\n        }\n\n        if (bot) {\n          if (!this.tileArray[x - 1][y - 1].explored) {\n            this.tileArray[x - 1][y - 1].explored = true;\n            character.exploredSquare();\n          }\n        }\n      }\n\n      if (top) {\n        if (!this.tileArray[x][y + 1].explored) {\n          this.tileArray[x][y + 1].explored = true;\n          character.exploredSquare();\n        }\n      }\n\n      if (top) {\n        if (!this.tileArray[x][y - 1].explored) {\n          this.tileArray[x][y - 1].explored = true;\n          character.exploredSquare();\n        }\n      }\n\n      return updateInfoPanel;\n    }\n\n    clickAction(clickedTile, character) {\n      switch (clickedTile.contents) {\n        case 'healthPotion':\n          character.healthPotions++;\n          break;\n\n        case 'gold':\n          let goldAdd = Math.round(Math.random() * 2 + 1);\n          character.gold += goldAdd;\n          break;\n\n        case 'manaPotion':\n          character.manaPotions++;\n          break;\n\n        case 'healthBoost':\n          character.baseHealth++;\n          break;\n\n        case 'manaBoost':\n          character.baseMana++;\n          break;\n\n        case 'strengthBoost':\n          character.bonusStrength++;\n          break;\n\n        default:\n          break;\n      }\n\n      if (clickedTile.contents instanceof Spell || clickedTile.contents instanceof Enemy) {\n        clickedTile.playerAndContent = true;\n      } else {\n        clickedTile.contents = 'player';\n      }\n\n      return;\n    }\n\n  }\n\n  GridMatrix.ɵfac = function GridMatrix_Factory(t) {\n    return new (t || GridMatrix)(i0.ɵɵinject(i1.Character));\n  };\n\n  GridMatrix.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GridMatrix,\n    factory: GridMatrix.ɵfac\n  });\n  return GridMatrix;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\models\\gridMatrix.ts"],"names":[],"mappings":"AACA,SAAS,IAAT,QAAqB,QAArB;AACA,OAAO,KAAK,CAAZ,MAAmB,QAAnB;AAEA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,KAAT,QAAsB,SAAtB;;;AAGA,WAAa,UAAb;AAAM,QAAO,UAAP,CAAiB;AAGnB;AAEA,IAAA,WAAA,CAAY,SAAZ,EAAgC;AAE5B,UAAI,KAAK,GAAG,EAAZ;AACA,UAAI,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,EAAhB,GAAqB,CAAhC,CAApB;AACA,UAAI,aAAa,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,EAAhB,GAAqB,CAAhC,CAApB;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,EAAsB,IAAtB,EAA4B,QAA5B,EAAsC,aAAtC,EAAqD,aAArD,CAAX,EAL4B,CAO5B;;AACA,UAAI,QAAQ,GAAG,IAAI,KAAJ,CAAU,UAAV,CAAf;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACA,UAAI,WAAW,GAAG,CAAC,QAAD,CAAlB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,WAAV,GAAwB,CAA5C,EAA+C,CAAC,EAAhD,EAAoD;AAChD,YAAI,QAAQ,GAAG,KAAK,cAAL,CAAoB,WAApB,CAAf;;AACA,YAAI,QAAQ,YAAY,KAAxB,EAA+B;AAC3B,UAAA,WAAW,CAAC,IAAZ,CAAiB,QAAjB;AACH;;AACD,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACH,OAjB2B,CAkB5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,MAA7B,CAAX;AACH,OArB2B,CAsB5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,eAA7B,CAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,aAA7B,CAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,WAA7B,CAAX;AACH,OA3B2B,CA4B5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,MAA7B,CAAX;AACH,OA/B2B,CAgC5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,OAA7B,CAAX;AACH,OAnC2B,CAoC5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,cAA7B,CAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,YAA7B,CAAX;AACH,OAxC2B,CA0C5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACH,OA7C2B,CA8C5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACH,OAjD2B,CAkD5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACH,OArD2B,CAsD5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACH,OA7D2B,CA8D5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,QAA7B,CAAX;AACH,OAjE2B,CAkE5B;;;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,SAA7B,CAAX,EAnE4B,CAqE5B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC1B,YAAI,OAAO,GAAG,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,CAAd;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,OAAX;AACH,OAzE2B,CA2E5B;;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,YAAI,OAAO,GAAG,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,CAAd;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,OAAX;AACH;;AAED,UAAI,SAAS,GAAG,MAAM,KAAK,CAAC,MAA5B,CAjF4B,CAkF5B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AAChC,YAAI,OAAO,GAAG,IAAI,IAAJ,CAAS,KAAT,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,OAA7B,CAAd;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,OAAX;AACH;;AAID,UAAI,YAAY,GAAG,CAAC,CAAC,MAAF,CAAS,KAAT,EAAgB,UAAU,IAAV,EAAc;AAC7C,eAAO,IAAI,CAAC,QAAZ;AACH,OAFkB,CAAnB;;AAIA,UAAI,cAAc,GAAG,KAAK,eAAL,CAAqB,aAArB,EAAoC,aAApC,EAAmD,YAAY,CAAC,MAAhE,CAArB;AAEA,MAAA,cAAc,CAAC,OAAf,CAAuB,UAAU,IAAG;AAChC,YAAI,EAAE,UAAU,CAAC,MAAX,IAAqB,aAArB,IAAsC,UAAU,CAAC,MAAX,IAAqB,aAA7D,CAAJ,EAAiF;AAC7E,cAAI,UAAU,GAAG,CAAC,CAAC,MAAF,CAAS,YAAT,EAAuB,UAAU,IAAV,EAAc;AAClD,mBAAO,IAAI,CAAC,QAAL,IAAiB,IAAI,CAAC,MAAL,IAAe,IAAhC,IAAwC,IAAI,CAAC,MAAL,IAAe,IAA9D;AACH,WAFgB,CAAjB;;AAGA,cAAI,OAAO,GAAG,KAAK,aAAL,CAAmB,UAAnB,CAAd;;AACA,cAAI,KAAK,uBAAL,CAA6B,aAA7B,EAA4C,aAA5C,EAA2D,UAA3D,CAAJ,EAA4E;AACxE,YAAA,OAAO,CAAC,QAAR,GAAmB,IAAnB;AACH;;AACD,UAAA,OAAO,CAAC,MAAR,GAAiB,UAAU,CAAC,MAA5B;AACA,UAAA,OAAO,CAAC,MAAR,GAAiB,UAAU,CAAC,MAA5B;AACH;AACJ,OAZD;;AAcA,UAAI,cAAc,GAAG,CAAC,CAAC,MAAF,CAAS,KAAT,EAAgB,UAAU,IAAV,EAAc;AAC/C,eAAO,CAAC,IAAI,CAAC,QAAN,IAAkB,IAAI,CAAC,MAAL,IAAe,IAAjC,IAAyC,IAAI,CAAC,MAAL,IAAe,IAA/D;AACH,OAFoB,CAArB;;AAMA,WAAK,uBAAL,CAA6B,cAA7B,EAA6C,cAA7C;AACA,MAAA,KAAK,GAAG,KAAK,YAAL,CAAkB,KAAlB,CAAR;AAGA,WAAK,SAAL,GAAiB,KAAjB;AACH;;AAED,IAAA,cAAc,CAAC,WAAD,EAAY;AACtB,UAAI,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,EAA3B,CAAf;;AAEA,cAAQ,QAAR;AACI,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA2C,IAA/C,EAAqD;AACjD,mBAAO,IAAI,KAAJ,CAAU,QAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAAgD,IAApD,EAA0D;AACtD,mBAAO,IAAI,KAAJ,CAAU,YAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA0C,IAA9C,EAAoD;AAChD,mBAAO,IAAI,KAAJ,CAAU,OAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA+C,IAAnD,EAAyD;AACrD,mBAAO,IAAI,KAAJ,CAAU,WAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAAiD,IAArD,EAA2D;AACvD,mBAAO,IAAI,KAAJ,CAAU,aAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAAiD,IAArD,EAA2D;AACvD,mBAAO,IAAI,KAAJ,CAAU,aAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAAyC,IAA7C,EAAmD;AAC/C,mBAAO,IAAI,KAAJ,CAAU,MAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA4C,IAAhD,EAAsD;AAClD,mBAAO,IAAI,KAAJ,CAAU,SAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA2C,IAA/C,EAAqD;AACjD,mBAAO,IAAI,KAAJ,CAAU,QAAV,CAAP;AACH;;AACL,aAAK,CAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAAqD,IAAzD,EAA+D;AAC3D,mBAAO,IAAI,KAAJ,CAAU,iBAAV,CAAP;AACH;;AACL,aAAK,EAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA6C,IAAjD,EAAuD;AACnD,mBAAO,IAAI,KAAJ,CAAU,UAAV,CAAP;AACH;;AACL,aAAK,EAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA2C,IAA/C,EAAqD;AACjD,mBAAO,IAAI,KAAJ,CAAU,QAAV,CAAP;AACH;;AACL,aAAK,EAAL;AACI,cAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,YAAA,IAAI,EAAE;AAAR,WAApB,KAA8C,IAAlD,EAAwD;AACpD,mBAAO,IAAI,KAAJ,CAAU,UAAV,CAAP;AACH;;AACL;AACI;AAtDR;;AAyDA,aAAO,OAAP;AACH;;AAED,IAAA,aAAa,CAAC,QAAD,EAAS;AAClB,UAAI,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,MAAiB,QAAQ,CAAC,MAAT,GAAkB,CAAnC,CAAX,CAAlB;AACA,UAAI,UAAU,GAAG,QAAQ,CAAC,WAAD,CAAzB;;AACA,UAAI,UAAU,CAAC,MAAX,IAAqB,IAArB,IAA6B,UAAU,CAAC,MAAX,IAAqB,IAAtD,EAA4D;AACxD,eAAO,UAAP;AACH;AACJ;;AAIO,IAAA,eAAe,CAAC,MAAD,EAAS,MAAT,EAAiB,UAAjB,EAA2B;AAC9C,UAAI,UAAU,GAAG,CAAC;AAAE,QAAA,MAAM,EAAE,MAAV;AAAkB,QAAA,MAAM,EAAE;AAA1B,OAAD,CAAjB;AAEA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAM,GAAG,CAAnB;AAAsB,QAAA,MAAM,EAAE,MAAM,GAAG;AAAvC,OAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAM,GAAG,CAAnB;AAAsB,QAAA,MAAM,EAAE,MAAM,GAAG;AAAvC,OAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAM,GAAG,CAAnB;AAAsB,QAAA,MAAM,EAAE,MAAM,GAAG;AAAvC,OAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAM,GAAG,CAAnB;AAAsB,QAAA,MAAM,EAAE,MAAM,GAAG;AAAvC,OAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAM,GAAG,CAAnB;AAAsB,QAAA,MAAM,EAAE;AAA9B,OAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAV;AAAkB,QAAA,MAAM,EAAE,MAAM,GAAG;AAAnC,OAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAV;AAAkB,QAAA,MAAM,EAAE,MAAM,GAAG;AAAnC,OAAhB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB;AAAE,QAAA,MAAM,EAAE,MAAM,GAAG,CAAnB;AAAsB,QAAA,MAAM,EAAE;AAA9B,OAAhB;AAIA,UAAI,YAAJ,CAd8C,CAe9C;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,GAAG,CAAjC,EAAoC,CAAC,EAArC,EAAyC;AACrC,YAAI,CAAC,IAAI,EAAL,IAAW,CAAC,GAAG,EAAJ,IAAU,CAAzB,EAA4B;AACxB,UAAA,YAAY,GAAG,KAAK,mBAAL,CAAyB,UAAzB,EAAqC,EAArC,EAAyC,CAAzC,CAAf;AACH,SAFD,MAEO;AACH,UAAA,YAAY,GAAG,KAAK,mBAAL,CAAyB,UAAzB,EAAqC,IAArC,EAA2C,CAA3C,CAAf;AACH;;AAGD,YAAI,CAAC,IAAI,UAAU,GAAG,CAAtB,EAAyB;AACrB,cAAI,OAAO,GAAG,CAAC,CAAC,GAAF,CAAM,UAAN,EAAkB,QAAlB,CAAd;;AACA,cAAI,OAAO,GAAG,CAAC,CAAC,GAAF,CAAM,UAAN,EAAkB,QAAlB,CAAd;;AAGA,cAAI,WAAW,GAAG,CAAC,CAAC,IAAF,CAAO,CAAC,CAAC,OAAD,CAAD,CACpB,OADoB,GAEpB,OAFoB,GAGpB,KAHoB,CAGd,CAAC,CAAC,IAHY,CAAP,CAAlB;;AAKA,UAAA,WAAW,GAAG,KAAK,WAAnB;;AAEA,cAAI,WAAW,GAAG,CAAC,CAAC,IAAF,CAAO,CAAC,CAAC,OAAD,CAAD,CACpB,OADoB,GAEpB,OAFoB,GAGpB,KAHoB,CAGd,CAAC,CAAC,IAHY,CAAP,CAAlB;;AAKA,UAAA,WAAW,GAAG,KAAK,WAAnB;AAEA,UAAA,YAAY,GAAG;AAAE,YAAA,MAAM,EAAE,WAAV;AAAuB,YAAA,MAAM,EAAE;AAA/B,WAAf;AACH;;AAED,YAAI,mBAAmB,GAAG,KAAK,gBAAL,CAAsB,YAAtB,EAAoC,UAApC,EAAgD,CAAhD,CAA1B;AACA,QAAA,YAAY,GAAG,mBAAf;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,mBAAhB;AACH;;AAED,aAAO,UAAP;AACH;;AAED,IAAA,mBAAmB,CAAC,WAAD,EAAc,OAAd,EAAuB,cAAvB,EAAqC;AACpD,UAAI,cAAc,IAAI,EAAtB,EAA0B;AACtB,QAAA,OAAO,GAAG,CAAV;AACH;;AAED,UAAI,iBAAiB,GAAI,WAAW,CAAC,MAAZ,GAAqB,CAAtB,GAA2B,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,CAA3B,CAAnD;;AAEA,UAAI,OAAO,IAAI,IAAf,EAAqB;AACjB,QAAA,iBAAiB,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,MAAiB,WAAW,CAAC,MAAZ,GAAqB,OAAtC,CAAX,CAApB;AACH;;AACD,UAAI,YAAY,GAAG,WAAW,CAAC,iBAAD,CAA9B;AACA,UAAI,UAAU,GAAG,KAAK,YAAL,CAAkB,YAAlB,EAAgC,WAAhC,CAAjB;;AAGA,UAAI,UAAJ,EAAgB;AACZ,eAAO,KAAK,mBAAL,CAAyB,WAAzB,EAAsC,OAAtC,EAA+C,cAAc,GAAG,CAAhE,CAAP;AACH,OAFD,MAEO;AACH,eAAO,YAAP;AACH;AACJ;;AAED,IAAA,YAAY,CAAC,YAAD,EAAe,WAAf,EAA0B;AAClC,UAAI,UAAU,GACV,CAAC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC;AAAxD,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,EAA5H,MACC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAvB;AAA+B,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAA7D,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,EAD5H,MAEC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAAjE,OAApB,KAA6F,IAA7F,IAAqG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,EAA/H,IAAqI,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,EAFhK,MAGC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC;AAAxD,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,CAH5H,MAIC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAvB;AAA+B,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAA7D,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,CAJ5H,MAKC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAAjE,OAApB,KAA6F,IAA7F,IAAqG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,CAA/H,IAAoI,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,CAL/J,MAMC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAAjE,OAApB,KAA6F,IAA7F,IAAqG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,EAA/H,IAAqI,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,CANhK,MAOC,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAAjE,OAApB,KAA6F,IAA7F,IAAqG,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,EAA/H,IAAqI,YAAY,CAAC,MAAb,GAAsB,CAAtB,GAA0B,CAPhK,CADJ;AAUA,aAAO,UAAP;AACH;;AAED,IAAA,uBAAuB,CAAC,aAAD,EAAgB,aAAhB,EAA+B,UAA/B,EAAyC;AAC5D,UAAI,CAAC,UAAU,CAAC,MAAX,IAAqB,aAAa,GAAG,CAArC,IACD,UAAU,CAAC,MAAX,IAAqB,aAAa,GAAG,CADpC,IAED,UAAU,CAAC,MAAX,IAAqB,aAFrB,MAGC,UAAU,CAAC,MAAX,IAAqB,aAAa,GAAG,CAArC,IACG,UAAU,CAAC,MAAX,IAAqB,aAAa,GAAG,CADxC,IAEG,UAAU,CAAC,MAAX,IAAqB,aALzB,CAAJ,EAME;AACE,eAAO,IAAP;AACH;;AAED,aAAO,KAAP;AACH;;AAED,IAAA,gBAAgB,CAAC,YAAD,EAAe,WAAf,EAA4B,cAA5B,EAA0C;AAEtD,UAAI,cAAc,IAAI,EAAtB,EAA0B;AACtB,QAAA,YAAY,GAAG,KAAK,mBAAL,CAAyB,WAAzB,EAAsC,CAAtC,EAAyC,CAAzC,CAAf;AACA,QAAA,cAAc,GAAG,CAAjB;AACH;;AAED,UAAI,KAAK,GAAG,CAAZ;AACA,UAAI,KAAK,GAAG,CAAZ;AACA,UAAI,QAAQ,GAAG,KAAf;AACA,UAAI,QAAQ,GAAG,KAAf;AACA,UAAI,QAAQ,GAAG,KAAf;AACA,UAAI,QAAQ,GAAG,KAAf;;AACA,UAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC;AAAxD,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,IAAuB,EAA5H,EAAgI;AAC5H,QAAA,QAAQ,GAAG,IAAX;AACA,QAAA,KAAK,GAAG,CAAE,CAAV;AACH;;AACD,UAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB,CAAhC;AAAmC,QAAA,MAAM,EAAE,YAAY,CAAC;AAAxD,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,IAAuB,CAA5H,EAA+H;AAC3H,QAAA,KAAK,GAAG,CAAR;AACA,QAAA,QAAQ,GAAG,IAAX;AACH;;AAED,UAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAvB;AAA+B,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAA7D,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,IAAuB,EAA5H,EAAgI;AAC5H,QAAA,KAAK,GAAG,CAAE,CAAV;AACA,QAAA,QAAQ,GAAG,IAAX;AACH;;AACD,UAAI,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,YAAY,CAAC,MAAvB;AAA+B,QAAA,MAAM,EAAE,YAAY,CAAC,MAAb,GAAsB;AAA7D,OAApB,KAAyF,IAAzF,IAAiG,YAAY,CAAC,MAAb,IAAuB,CAA5H,EAA+H;AAC3H,QAAA,KAAK,GAAG,CAAR;AACA,QAAA,QAAQ,GAAG,IAAX;AACH;;AAED,UAAI,KAAK,GAAG,IAAI,CAAC,MAAL,EAAZ;AACA,UAAI,KAAK,GAAG,IAAI,CAAC,MAAL,EAAZ;;AACA,UAAI,QAAQ,IAAI,QAAhB,EAA0B;AACtB,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAE,CAAlB;AACH;;AACD,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAhB;AACH;AACJ,OAPD,MAOO;AACH,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAE,CAAlB;AACH;;AACD,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAhB;AACH;AACJ;;AAGD,UAAI,QAAQ,IAAI,QAAhB,EAA0B;AACtB,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAE,CAAlB;AACH;;AACD,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAhB;AACH;AACJ,OAPD,MAOO;AACH,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAE,CAAlB;AACH;;AACD,YAAI,KAAK,GAAG,IAAZ,EAAkB;AACd,UAAA,KAAK,GAAG,KAAK,GAAG,CAAhB;AACH;AACJ;;AAED,UAAI,SAAS,GAAG,YAAY,CAAC,MAAb,GAAsB,KAAtC;AACA,UAAI,SAAS,GAAG,YAAY,CAAC,MAAb,GAAsB,KAAtC;;AAGA,UAAI,QAAQ,GAAG,CAAC,CAAC,IAAF,CAAO,WAAP,EAAoB;AAAE,QAAA,MAAM,EAAE,SAAV;AAAqB,QAAA,MAAM,EAAE;AAA7B,OAApB,CAAf;;AACA,UAAK,YAAY,CAAC,MAAb,IAAuB,SAAvB,IAAoC,YAAY,CAAC,MAAb,IAAuB,SAA5D,IAA0E,QAAQ,IAAI,IAAtF,IAA8F,SAAS,GAAG,EAA1G,IAAgH,SAAS,GAAG,CAA5H,IAAiI,SAAS,GAAG,EAA7I,IAAmJ,SAAS,GAAG,CAAnK,EAAsK;AAClK,eAAO,KAAK,gBAAL,CAAsB,YAAtB,EAAoC,WAApC,EAAiD,cAAc,GAAG,CAAlE,CAAP;AACH,OAFD,MAEO;AACH,eAAO;AAAE,UAAA,MAAM,EAAE,SAAV;AAAqB,UAAA,MAAM,EAAE;AAA7B,SAAP;AACH;AACJ;;AAGD,IAAA,uBAAuB,CAAC,cAAD,EAAiB,eAAjB,EAAgC;AACnD,UAAI,gBAAgB,GAAG,EAAvB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,cAAI,CAAC,CAAC,IAAF,CAAO,cAAP,EAAuB;AAAE,YAAA,MAAM,EAAE,CAAV;AAAa,YAAA,MAAM,EAAE;AAArB,WAAvB,KAAoD,IAAxD,EAA8D;AAC1D,YAAA,gBAAgB,CAAC,IAAjB,CAAsB;AAAE,cAAA,MAAM,EAAE,CAAV;AAAa,cAAA,MAAM,EAAE;AAArB,aAAtB;AACH;AACJ;AACJ;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,eAAe,CAAC,MAApC,EAA4C,CAAC,EAA7C,EAAiD;AAC7C,QAAA,eAAe,CAAC,CAAD,CAAf,CAAmB,MAAnB,GAA4B,gBAAgB,CAAC,CAAD,CAAhB,CAAoB,MAAhD;AACA,QAAA,eAAe,CAAC,CAAD,CAAf,CAAmB,MAAnB,GAA4B,gBAAgB,CAAC,CAAD,CAAhB,CAAoB,MAAhD;AACH;AACJ;;AAED,IAAA,YAAY,CAAC,KAAD,EAAM;AACd,UAAI,SAAS,GAAG,EAAhB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,YAAI,UAAU,GAAG,EAAjB;;AACA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AACzB,UAAA,KAAK,CAAC,OAAN,CAAc,IAAI,IAAG;AACjB,gBAAI,IAAI,CAAC,MAAL,IAAe,CAAf,IAAoB,IAAI,CAAC,MAAL,IAAe,CAAvC,EAA0C;AACtC,cAAA,UAAU,CAAC,IAAX,CAAgB,IAAhB;AACH;AACJ,WAJD;AAKH;;AACD,QAAA,SAAS,CAAC,IAAV,CAAe,UAAf;AACH;;AACD,aAAO,SAAP;AACH;;AAED,IAAA,aAAa,GAAA;AACT,UAAI,UAAJ;AACA,WAAK,SAAL,CAAe,OAAf,CAAuB,GAAG,IAAG;AACzB,QAAA,GAAG,CAAC,OAAJ,CAAY,IAAI,IAAG;AACf,cAAI,IAAI,CAAC,QAAL,IAAiB,QAAjB,IAA6B,IAAI,CAAC,gBAAtC,EAAwD;AACpD,YAAA,UAAU,GAAG,IAAb;AACH;AACJ,SAJD;AAKH,OAND;AAOA,aAAO,UAAP;AACH;;AAED,IAAA,WAAW,CAAC,WAAD,EAAc,SAAd,EAAuB;AAE9B,UAAI,UAAU,GAAG,KAAK,aAAL,EAAjB;;AAEA,UAAI,UAAU,CAAC,QAAX,IAAuB,QAA3B,EAAqC;AACjC,QAAA,UAAU,CAAC,QAAX,GAAsB,OAAtB;AACH;;AACD,UAAI,UAAU,CAAC,gBAAf,EAAiC;AAC7B,QAAA,UAAU,CAAC,gBAAX,GAA8B,KAA9B;AACH;;AAED,UAAI,eAAe,GAAG,KAAtB;;AACA,UAAI,WAAW,CAAC,QAAZ,YAAgC,KAAhC,IAAyC,WAAW,CAAC,QAAZ,YAAgC,KAA7E,EAAoF;AAChF,QAAA,eAAe,GAAG,IAAlB;AACH;;AAED,WAAK,WAAL,CAAiB,WAAjB,EAA8B,SAA9B;AAEA,UAAI,CAAC,GAAG,WAAW,CAAC,MAApB;AACA,UAAI,CAAC,GAAG,WAAW,CAAC,MAApB;AAEA,UAAI,GAAG,GAAG,IAAV;AACA,UAAI,GAAG,GAAG,IAAV;AACA,UAAI,IAAI,GAAG,IAAX;AACA,UAAI,KAAK,GAAG,IAAZ;;AAEA,UAAI,CAAC,GAAG,CAAJ,GAAQ,EAAZ,EAAgB;AACZ,QAAA,KAAK,GAAG,KAAR;AACH;;AACD,UAAI,CAAC,GAAG,CAAJ,GAAQ,CAAZ,EAAe;AACX,QAAA,IAAI,GAAG,KAAP;AACH;;AACD,UAAI,CAAC,GAAG,CAAJ,GAAQ,EAAZ,EAAgB;AACZ,QAAA,GAAG,GAAG,KAAN;AACH;;AACD,UAAI,CAAC,GAAG,CAAJ,GAAQ,CAAZ,EAAe;AACX,QAAA,GAAG,GAAG,KAAN;AACH;;AAED,UAAI,KAAJ,EAAW;AACP,YAAI,CAAC,KAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAtB,EAAyB,QAA9B,EAAwC;AACpC,eAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAtB,EAAyB,QAAzB,GAAoC,IAApC;AACA,UAAA,SAAS,CAAC,cAAV;AACH;;AACD,YAAI,GAAJ,EAAS;AACL,cAAI,CAAC,KAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAAlC,EAA4C;AACxC,iBAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAA7B,GAAwC,IAAxC;AACA,YAAA,SAAS,CAAC,cAAV;AACH;AACJ;;AACD,YAAI,GAAJ,EAAS;AACL,cAAI,CAAC,KAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAAlC,EAA4C;AACxC,iBAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAA7B,GAAwC,IAAxC;AACA,YAAA,SAAS,CAAC,cAAV;AACH;AACJ;AACJ;;AAED,UAAI,IAAJ,EAAU;AACN,YAAI,CAAC,KAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAtB,EAAyB,QAA9B,EAAwC;AACpC,eAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAtB,EAAyB,QAAzB,GAAoC,IAApC;AACA,UAAA,SAAS,CAAC,cAAV;AACH;;AACD,YAAI,GAAJ,EAAS;AACL,cAAI,CAAC,KAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAAlC,EAA4C;AACxC,iBAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAA7B,GAAwC,IAAxC;AACA,YAAA,SAAS,CAAC,cAAV;AACH;AACJ;;AACD,YAAI,GAAJ,EAAS;AACL,cAAI,CAAC,KAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAAlC,EAA4C;AACxC,iBAAK,SAAL,CAAe,CAAC,GAAG,CAAnB,EAAsB,CAAC,GAAG,CAA1B,EAA6B,QAA7B,GAAwC,IAAxC;AACA,YAAA,SAAS,CAAC,cAAV;AACH;AACJ;AACJ;;AAED,UAAI,GAAJ,EAAS;AACL,YAAI,CAAC,KAAK,SAAL,CAAe,CAAf,EAAkB,CAAC,GAAG,CAAtB,EAAyB,QAA9B,EAAwC;AACpC,eAAK,SAAL,CAAe,CAAf,EAAkB,CAAC,GAAG,CAAtB,EAAyB,QAAzB,GAAoC,IAApC;AACA,UAAA,SAAS,CAAC,cAAV;AACH;AACJ;;AAED,UAAI,GAAJ,EAAS;AACL,YAAI,CAAC,KAAK,SAAL,CAAe,CAAf,EAAkB,CAAC,GAAG,CAAtB,EAAyB,QAA9B,EAAwC;AACpC,eAAK,SAAL,CAAe,CAAf,EAAkB,CAAC,GAAG,CAAtB,EAAyB,QAAzB,GAAoC,IAApC;AACA,UAAA,SAAS,CAAC,cAAV;AACH;AACJ;;AACD,aAAO,eAAP;AACH;;AAID,IAAA,WAAW,CAAC,WAAD,EAAc,SAAd,EAAuB;AAC9B,cAAQ,WAAW,CAAC,QAApB;AACI,aAAK,cAAL;AACI,UAAA,SAAS,CAAC,aAAV;AACA;;AACJ,aAAK,MAAL;AACI,cAAI,OAAO,GAAG,IAAI,CAAC,KAAL,CAAY,IAAI,CAAC,MAAL,KAAgB,CAAjB,GAAsB,CAAjC,CAAd;AACA,UAAA,SAAS,CAAC,IAAV,IAAkB,OAAlB;AACA;;AACJ,aAAK,YAAL;AACI,UAAA,SAAS,CAAC,WAAV;AACA;;AACJ,aAAK,aAAL;AACI,UAAA,SAAS,CAAC,UAAV;AACA;;AACJ,aAAK,WAAL;AACI,UAAA,SAAS,CAAC,QAAV;AACA;;AACJ,aAAK,eAAL;AACI,UAAA,SAAS,CAAC,aAAV;AACA;;AACJ;AACI;AArBR;;AAwBA,UAAI,WAAW,CAAC,QAAZ,YAAgC,KAAhC,IAAyC,WAAW,CAAC,QAAZ,YAAgC,KAA7E,EAAoF;AAChF,QAAA,WAAW,CAAC,gBAAZ,GAA+B,IAA/B;AACH,OAFD,MAEO;AACH,QAAA,WAAW,CAAC,QAAZ,GAAuB,QAAvB;AACH;;AACD;AACH;;AA3iBkB;;;qBAAV,U,EAAU,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,SAAA,C;AAAA,G;;;WAAV,U;AAAU,IAAA,OAAA,EAAV,UAAU,CAAA;;AAAvB,SAAa,UAAb;AAAA","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Tile } from \"./tile\";\r\nimport * as _ from 'lodash';\r\nimport { Character } from \"./character\";\r\nimport { Spell } from \"./spell\";\r\nimport { Enemy } from \"./enemy\";\r\n\r\n@Injectable()\r\nexport class GridMatrix {\r\n    tileArray;\r\n\r\n    //20 by 20\r\n\r\n    constructor(character: Character) {\r\n\r\n        let tiles = [];\r\n        let initialXCoord = Math.round(Math.random() * 16 + 2);\r\n        let initialYCoord = Math.round(Math.random() * 16 + 2);\r\n        tiles.push(new Tile(true, false, true, 'player', initialXCoord, initialYCoord))\r\n\r\n        // Spells\r\n        let fireBall = new Spell('fireBall')\r\n        tiles.push(new Tile(false, false, true, fireBall));\r\n        let excludeList = [fireBall];\r\n        for (let i = 0; i < character.spellsOnMap - 1; i++) {\r\n            let newSpell = this.getRandomSpell(excludeList);\r\n            if (newSpell instanceof Spell) {\r\n                excludeList.push(newSpell)\r\n            }\r\n            tiles.push(new Tile(false, false, true, newSpell));\r\n        }\r\n        // Gold\r\n        for (let i = 0; i < 7; i++) {\r\n            tiles.push(new Tile(false, false, true, 'gold'));\r\n        }\r\n        // stat boosts\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'strengthBoost'));\r\n            tiles.push(new Tile(false, false, true, 'healthBoost'));\r\n            tiles.push(new Tile(false, false, true, 'manaBoost'));\r\n        }\r\n        // shops\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'shop'));\r\n        }\r\n        // churches\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'altar'));\r\n        }\r\n        // potions\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'healthPotion'));\r\n            tiles.push(new Tile(false, false, true, 'manaPotion'));\r\n        }\r\n\r\n        // level 1\r\n        for (let i = 0; i < 10; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy1'));\r\n        }\r\n        // level 2\r\n        for (let i = 0; i < 5; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy2'));\r\n        }\r\n        // level 3\r\n        for (let i = 0; i < 4; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy3'));\r\n        }\r\n        // level 4, 5, 6, 7, 8\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy4'));\r\n            tiles.push(new Tile(false, false, true, 'enemy5'));\r\n            tiles.push(new Tile(false, false, true, 'enemy6'));\r\n            tiles.push(new Tile(false, false, true, 'enemy7'));\r\n            tiles.push(new Tile(false, false, true, 'enemy8'));\r\n        }\r\n        // level 9\r\n        for (let i = 0; i < 2; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy9'));\r\n        }\r\n        // level 10\r\n        tiles.push(new Tile(false, false, true, 'enemy10'));\r\n\r\n        // explorable wall tiles\r\n        for (let i = 0; i < 150; i++) {\r\n            let newtile = new Tile(false, false, false, 'wall');\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // unexplorable wall tiles\r\n        for (let i = 0; i < 50; i++) {\r\n            let newtile = new Tile(false, false, false, 'wall');\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        let remaining = 400 - tiles.length;\r\n        // walkable empty tiles\r\n        for (let i = 0; i < remaining; i++) {\r\n            let newtile = new Tile(false, false, true, 'empty');\r\n            tiles.push(newtile);\r\n        }\r\n\r\n\r\n\r\n        let walkableList = _.filter(tiles, function (tile) {\r\n            return tile.walkable\r\n        });\r\n\r\n        let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\r\n\r\n        walkableCoords.forEach(coordinate => {\r\n            if (!(coordinate.xCoord == initialXCoord && coordinate.yCoord == initialYCoord)) {\r\n                let unsetTiles = _.filter(walkableList, function (tile) {\r\n                    return tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n                });\r\n                let newTile = this.getRandomTile(unsetTiles)\r\n                if (this.coordinateTouchingStart(initialXCoord, initialYCoord, coordinate)) {\r\n                    newTile.explored = true;\r\n                }\r\n                newTile.xCoord = coordinate.xCoord;\r\n                newTile.yCoord = coordinate.yCoord;\r\n            }\r\n        })\r\n\r\n        let unwalkableList = _.filter(tiles, function (tile) {\r\n            return !tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n        });\r\n\r\n\r\n\r\n        this.setUnwalkableTileCoords(walkableCoords, unwalkableList);\r\n        tiles = this.formatMatrix(tiles);\r\n\r\n\r\n        this.tileArray = tiles;\r\n    }\r\n\r\n    getRandomSpell(excludelist) {\r\n        let spellnum = Math.round(Math.random() * 12);\r\n\r\n        switch (spellnum) {\r\n            case 0:\r\n                if (_.find(excludelist, { name: 'Poison' }) == null) {\r\n                    return new Spell('poison')\r\n                }\r\n            case 1:\r\n                if (_.find(excludelist, { name: 'Blood Magic' }) == null) {\r\n                    return new Spell('bloodMagic')\r\n                }\r\n            case 2:\r\n                if (_.find(excludelist, { name: 'Might' }) == null) {\r\n                    return new Spell('might')\r\n                }\r\n            case 3:\r\n                if (_.find(excludelist, { name: 'Death Defy' }) == null) {\r\n                    return new Spell('deathDefy')\r\n                }\r\n            case 4:\r\n                if (_.find(excludelist, { name: 'Destroy Wall' }) == null) {\r\n                    return new Spell('destroyWall')\r\n                }\r\n            case 5:\r\n                if (_.find(excludelist, { name: 'First Strike' }) == null) {\r\n                    return new Spell('firstStrike')\r\n                }\r\n            case 6:\r\n                if (_.find(excludelist, { name: 'Heal' }) == null) {\r\n                    return new Spell('heal')\r\n                }\r\n            case 7:\r\n                if (_.find(excludelist, { name: 'Petrify' }) == null) {\r\n                    return new Spell('petrify')\r\n                }\r\n            case 8:\r\n                if (_.find(excludelist, { name: 'Reveal' }) == null) {\r\n                    return new Spell('reveal')\r\n                }\r\n            case 9:\r\n                if (_.find(excludelist, { name: 'Teleport Monster' }) == null) {\r\n                    return new Spell('teleportMonster')\r\n                }\r\n            case 10:\r\n                if (_.find(excludelist, { name: 'Teleport' }) == null) {\r\n                    return new Spell('teleport')\r\n                }\r\n            case 11:\r\n                if (_.find(excludelist, { name: 'Summon' }) == null) {\r\n                    return new Spell('summon')\r\n                }\r\n            case 12:\r\n                if (_.find(excludelist, { name: 'Fire Ball' }) == null) {\r\n                    return new Spell('fireBall')\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return 'spell'\r\n    }\r\n\r\n    getRandomTile(tileList) {\r\n        let randomIndex = Math.round(Math.random() * (tileList.length - 1))\r\n        let randomTile = tileList[randomIndex];\r\n        if (randomTile.xCoord == null || randomTile.yCoord == null) {\r\n            return randomTile\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private getWalkablePath(xCoord, yCoord, tileNumber) {\r\n        let tileCoords = [{ xCoord: xCoord, yCoord: yCoord }];\r\n\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord });\r\n\r\n\r\n\r\n        let currentCoord;\r\n        //currentCoord = this.getRandomCoordinate(tileCoords, xCoord, yCoord);\r\n\r\n        for (let i = 0; i < tileNumber - 9; i++) {\r\n            if (i >= 20 && i % 20 == 0) {\r\n                currentCoord = this.getRandomCoordinate(tileCoords, 15, 0);\r\n            } else {\r\n                currentCoord = this.getRandomCoordinate(tileCoords, null, 0);\r\n            }\r\n\r\n\r\n            if (i == tileNumber / 3) {\r\n                let xCoords = _.map(tileCoords, 'xCoord');\r\n                let yCoords = _.map(tileCoords, 'yCoord');\r\n\r\n\r\n                let mostCommonX = _.head(_(xCoords)\r\n                    .countBy()\r\n                    .entries()\r\n                    .maxBy(_.last));\r\n\r\n                mostCommonX = 19 - mostCommonX;\r\n\r\n                let mostCommonY = _.head(_(yCoords)\r\n                    .countBy()\r\n                    .entries()\r\n                    .maxBy(_.last));\r\n\r\n                mostCommonY = 19 - mostCommonY;\r\n\r\n                currentCoord = { xCoord: mostCommonX, yCoord: mostCommonY };\r\n            }\r\n\r\n            let expansionCoordinate = this.getNewCoordinate(currentCoord, tileCoords, 0);\r\n            currentCoord = expansionCoordinate;\r\n            tileCoords.push(expansionCoordinate);\r\n        }\r\n\r\n        return tileCoords;\r\n    }\r\n\r\n    getRandomCoordinate(coordinates, refresh, recursionCount) {\r\n        if (recursionCount >= 15) {\r\n            refresh = 1\r\n        }\r\n\r\n        let currentCoordIndex = (coordinates.length - 1) - Math.round(Math.random() * 4);\r\n\r\n        if (refresh != null) {\r\n            currentCoordIndex = Math.round(Math.random() * (coordinates.length - refresh));\r\n        }\r\n        let currentCoord = coordinates[currentCoordIndex]\r\n        let surrounded = this.isSurrounded(currentCoord, coordinates);\r\n\r\n\r\n        if (surrounded) {\r\n            return this.getRandomCoordinate(coordinates, refresh, recursionCount + 1);\r\n        } else {\r\n            return currentCoord;\r\n        }\r\n    }\r\n\r\n    isSurrounded(currentCoord, coordinates) {\r\n        let surrounded =\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.xCoord - 1 < 0 || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord + 1 > 19 || currentCoord.xCoord - 1 < 0);\r\n\r\n        return surrounded;\r\n    }\r\n\r\n    coordinateTouchingStart(initialXCoord, initialYCoord, coordinate) {\r\n        if ((coordinate.xCoord == initialXCoord + 1 ||\r\n            coordinate.xCoord == initialXCoord - 1 ||\r\n            coordinate.xCoord == initialXCoord) &&\r\n            (coordinate.yCoord == initialYCoord + 1 ||\r\n                coordinate.yCoord == initialYCoord - 1 ||\r\n                coordinate.yCoord == initialYCoord)\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getNewCoordinate(currentCoord, coordinates, recursionCount) {\r\n\r\n        if (recursionCount >= 15) {\r\n            currentCoord = this.getRandomCoordinate(coordinates, 1, 0);\r\n            recursionCount = 0\r\n        }\r\n\r\n        let xBias = 1;\r\n        let yBias = 1;\r\n        let xBiasPos = false;\r\n        let xBiasNeg = false;\r\n        let yBiasPos = false;\r\n        let yBiasNeg = false;\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord == 19) {\r\n            xBiasNeg = true;\r\n            xBias = - 1\r\n        }\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord == 0) {\r\n            xBias = 1\r\n            xBiasPos = true;\r\n        }\r\n\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord == 19) {\r\n            yBias = - 1\r\n            yBiasNeg = true;\r\n        }\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.yCoord == 0) {\r\n            yBias = 1\r\n            yBiasPos = true;\r\n        }\r\n\r\n        let xRand = Math.random();\r\n        let yRand = Math.random();\r\n        if (xBiasNeg && xBiasPos) {\r\n            if (xRand > 0.95) {\r\n                xBias = xBias * - 1;\r\n            }\r\n            if (xRand < 0.90) {\r\n                xBias = xBias * 0;\r\n            }\r\n        } else {\r\n            if (xRand > 0.80) {\r\n                xBias = xBias * - 1;\r\n            }\r\n            if (xRand < 0.20) {\r\n                xBias = xBias * 0;\r\n            }\r\n        }\r\n\r\n\r\n        if (yBiasNeg && yBiasPos) {\r\n            if (yRand > 0.95) {\r\n                yBias = yBias * - 1;\r\n            }\r\n            if (xRand < 0.90) {\r\n                yBias = yBias * 0;\r\n            }\r\n        } else {\r\n            if (yRand > 0.80) {\r\n                yBias = yBias * - 1;\r\n            }\r\n            if (yRand < 0.20) {\r\n                yBias = yBias * 0;\r\n            }\r\n        }\r\n\r\n        let newXCoord = currentCoord.xCoord + xBias\r\n        let newYCoord = currentCoord.yCoord + yBias\r\n\r\n\r\n        let included = _.find(coordinates, { xCoord: newXCoord, yCoord: newYCoord });\r\n        if ((currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord) || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\r\n            return this.getNewCoordinate(currentCoord, coordinates, recursionCount + 1);\r\n        } else {\r\n            return { xCoord: newXCoord, yCoord: newYCoord }\r\n        }\r\n    }\r\n\r\n\r\n    setUnwalkableTileCoords(walkableCoords, unwalkableTiles) {\r\n        let unwalkableCoords = [];\r\n        for (let i = 0; i < 20; i++) {\r\n            for (let j = 0; j < 20; j++) {\r\n                if (_.find(walkableCoords, { xCoord: i, yCoord: j }) == null) {\r\n                    unwalkableCoords.push({ xCoord: i, yCoord: j })\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < unwalkableTiles.length; i++) {\r\n            unwalkableTiles[i].xCoord = unwalkableCoords[i].xCoord;\r\n            unwalkableTiles[i].yCoord = unwalkableCoords[i].yCoord;\r\n        }\r\n    }\r\n\r\n    formatMatrix(tiles) {\r\n        let tileArray = []\r\n\r\n        for (let i = 0; i < 20; i++) {\r\n            let innerArray = [];\r\n            for (let j = 0; j < 20; j++) {\r\n                tiles.forEach(tile => {\r\n                    if (tile.xCoord == i && tile.yCoord == j) {\r\n                        innerArray.push(tile)\r\n                    }\r\n                })\r\n            }\r\n            tileArray.push(innerArray)\r\n        }\r\n        return tileArray\r\n    }\r\n\r\n    getPlayerTile() {\r\n        let playerTile;\r\n        this.tileArray.forEach(row => {\r\n            row.forEach(tile => {\r\n                if (tile.contents == 'player' || tile.playerAndContent) {\r\n                    playerTile = tile;\r\n                }\r\n            })\r\n        })\r\n        return playerTile;\r\n    }\r\n\r\n    clickedTile(clickedTile, character): boolean {\r\n\r\n        let playerTile = this.getPlayerTile();\r\n\r\n        if (playerTile.contents == 'player') {\r\n            playerTile.contents = 'empty';\r\n        }\r\n        if (playerTile.playerAndContent) {\r\n            playerTile.playerAndContent = false;\r\n        }\r\n\r\n        let updateInfoPanel = false;\r\n        if (clickedTile.contents instanceof Spell || clickedTile.contents instanceof Enemy) {\r\n            updateInfoPanel = true\r\n        }\r\n\r\n        this.clickAction(clickedTile, character);\r\n\r\n        let x = clickedTile.xCoord;\r\n        let y = clickedTile.yCoord;\r\n\r\n        let top = true;\r\n        let bot = true;\r\n        let left = true;\r\n        let right = true;\r\n\r\n        if (x + 1 > 19) {\r\n            right = false\r\n        }\r\n        if (x - 1 < 0) {\r\n            left = false\r\n        }\r\n        if (y + 1 > 19) {\r\n            top = false\r\n        }\r\n        if (y - 1 < 0) {\r\n            bot = false\r\n        }\r\n\r\n        if (right) {\r\n            if (!this.tileArray[x + 1][y].explored) {\r\n                this.tileArray[x + 1][y].explored = true;\r\n                character.exploredSquare();\r\n            }\r\n            if (top) {\r\n                if (!this.tileArray[x + 1][y + 1].explored) {\r\n                    this.tileArray[x + 1][y + 1].explored = true;\r\n                    character.exploredSquare();\r\n                }\r\n            }\r\n            if (bot) {\r\n                if (!this.tileArray[x + 1][y - 1].explored) {\r\n                    this.tileArray[x + 1][y - 1].explored = true;\r\n                    character.exploredSquare();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (left) {\r\n            if (!this.tileArray[x - 1][y].explored) {\r\n                this.tileArray[x - 1][y].explored = true;\r\n                character.exploredSquare();\r\n            }\r\n            if (top) {\r\n                if (!this.tileArray[x - 1][y + 1].explored) {\r\n                    this.tileArray[x - 1][y + 1].explored = true;\r\n                    character.exploredSquare();\r\n                }\r\n            }\r\n            if (bot) {\r\n                if (!this.tileArray[x - 1][y - 1].explored) {\r\n                    this.tileArray[x - 1][y - 1].explored = true;\r\n                    character.exploredSquare();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (top) {\r\n            if (!this.tileArray[x][y + 1].explored) {\r\n                this.tileArray[x][y + 1].explored = true;\r\n                character.exploredSquare();\r\n            }\r\n        }\r\n\r\n        if (top) {\r\n            if (!this.tileArray[x][y - 1].explored) {\r\n                this.tileArray[x][y - 1].explored = true;\r\n                character.exploredSquare();\r\n            }\r\n        }\r\n        return updateInfoPanel;\r\n    }\r\n\r\n\r\n\r\n    clickAction(clickedTile, character) {\r\n        switch (clickedTile.contents) {\r\n            case 'healthPotion':\r\n                character.healthPotions++;\r\n                break;\r\n            case 'gold':\r\n                let goldAdd = Math.round((Math.random() * 2) + 1);\r\n                character.gold += goldAdd;\r\n                break;\r\n            case 'manaPotion':\r\n                character.manaPotions++;\r\n                break;\r\n            case 'healthBoost':\r\n                character.baseHealth++;\r\n                break;\r\n            case 'manaBoost':\r\n                character.baseMana++;\r\n                break;\r\n            case 'strengthBoost':\r\n                character.bonusStrength++;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (clickedTile.contents instanceof Spell || clickedTile.contents instanceof Enemy) {\r\n            clickedTile.playerAndContent = true;\r\n        } else {\r\n            clickedTile.contents = 'player'\r\n        }\r\n        return;\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}