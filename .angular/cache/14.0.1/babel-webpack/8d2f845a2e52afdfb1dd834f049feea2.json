{"ast":null,"code":"import { Spell } from \"./spell\";\nimport * as i0 from \"@angular/core\";\nexport let Character = /*#__PURE__*/(() => {\n  class Character {\n    constructor() {\n      this.name = 'Jared';\n      this.race = 'Human';\n      this.class = 'Fighter';\n      this.level = 3;\n      this.experience = 7;\n      this.gold = 13;\n      this.piety = 20;\n      this.healthPotions = 1;\n      this.manaPotions = 1;\n      this.baseStrength = 5;\n      this.bonusStrength = 0;\n      this.currentHealth = 15;\n      this.currentMana = 12;\n      this.baseHealth = 10;\n      this.baseMana = 12;\n      this.baseHealthRegen = 1;\n      this.manaRegen = 1;\n      this.healthPotionGain = 0.38;\n      this.manaPotionGain = 0.35;\n      this.permaFirstStrike = false;\n      this.spellSlots = 3;\n      this.spellsOnMap = 5;\n      this.pngString = 'HeroBase';\n      this.levelNumberWidth = 6;\n      this.levelNumberHeight = 12;\n      this.spells = [];\n\n      for (let i = 0; i < this.spellSlots; i++) {\n        this.spells.push(new Spell('empty'));\n      }\n    }\n\n    getMaxHealth() {\n      return this.baseHealth * this.level;\n    }\n\n    getCurrentAttack() {\n      return this.baseStrength * this.level + this.bonusStrength;\n    }\n\n    getMaxExperience() {\n      return this.level * 5;\n    }\n\n    getHealthRegen() {\n      return this.level * this.baseHealthRegen;\n    }\n\n    exploredSquare() {\n      this.currentHealth + this.getHealthRegen() > this.getMaxHealth() ? this.currentHealth = this.getMaxHealth() : this.currentHealth += this.getHealthRegen();\n      this.currentMana + this.manaRegen > this.baseMana ? this.currentMana = this.baseMana : this.currentMana += this.manaRegen;\n    }\n\n    addSpell(spell) {}\n\n  }\n\n  Character.ɵfac = function Character_Factory(t) {\n    return new (t || Character)();\n  };\n\n  Character.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Character,\n    factory: Character.ɵfac\n  });\n  return Character;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\models\\character.ts"],"names":[],"mappings":"AACA,SAAS,KAAT,QAAsB,SAAtB;;AAGA,WAAa,SAAb;AAAM,QAAO,SAAP,CAAgB;AA6CpB,IAAA,WAAA,GAAA;AACE,WAAK,IAAL,GAAY,OAAZ;AACA,WAAK,IAAL,GAAY,OAAZ;AACA,WAAK,KAAL,GAAa,SAAb;AACA,WAAK,KAAL,GAAa,CAAb;AACA,WAAK,UAAL,GAAkB,CAAlB;AACA,WAAK,IAAL,GAAY,EAAZ;AACA,WAAK,KAAL,GAAa,EAAb;AACA,WAAK,aAAL,GAAqB,CAArB;AACA,WAAK,WAAL,GAAmB,CAAnB;AACA,WAAK,YAAL,GAAoB,CAApB;AACA,WAAK,aAAL,GAAqB,CAArB;AACA,WAAK,aAAL,GAAqB,EAArB;AACA,WAAK,WAAL,GAAmB,EAAnB;AACA,WAAK,UAAL,GAAkB,EAAlB;AACA,WAAK,QAAL,GAAgB,EAAhB;AACA,WAAK,eAAL,GAAuB,CAAvB;AACA,WAAK,SAAL,GAAiB,CAAjB;AACA,WAAK,gBAAL,GAAwB,IAAxB;AACA,WAAK,cAAL,GAAsB,IAAtB;AACA,WAAK,gBAAL,GAAwB,KAAxB;AACA,WAAK,UAAL,GAAkB,CAAlB;AACA,WAAK,WAAL,GAAmB,CAAnB;AACA,WAAK,SAAL,GAAiB,UAAjB;AACA,WAAK,gBAAL,GAAwB,CAAxB;AACA,WAAK,iBAAL,GAAyB,EAAzB;AAEA,WAAK,MAAL,GAAY,EAAZ;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,UAAzB,EAAqC,CAAC,EAAtC,EAA0C;AACxC,aAAK,MAAL,CAAY,IAAZ,CAAiB,IAAI,KAAJ,CAAU,OAAV,CAAjB;AACD;AAIF;;AAGD,IAAA,YAAY,GAAA;AACV,aAAO,KAAK,UAAL,GAAkB,KAAK,KAA9B;AACD;;AAED,IAAA,gBAAgB,GAAA;AACd,aAAQ,KAAK,YAAL,GAAoB,KAAK,KAA1B,GAAmC,KAAK,aAA/C;AACD;;AAED,IAAA,gBAAgB,GAAA;AACd,aAAO,KAAK,KAAL,GAAa,CAApB;AACD;;AAED,IAAA,cAAc,GAAA;AACZ,aAAO,KAAK,KAAL,GAAa,KAAK,eAAzB;AACD;;AAED,IAAA,cAAc,GAAA;AACX,WAAK,aAAL,GAAqB,KAAK,cAAL,EAAtB,GAAgD,KAAK,YAAL,EAAhD,GAAsE,KAAK,aAAL,GAAqB,KAAK,YAAL,EAA3F,GAAiH,KAAK,aAAL,IAAsB,KAAK,cAAL,EAAvI;AACC,WAAK,WAAL,GAAmB,KAAK,SAAzB,GAAuC,KAAK,QAA5C,GAAuD,KAAK,WAAL,GAAmB,KAAK,QAA/E,GAA0F,KAAK,WAAL,IAAoB,KAAK,SAAnH;AACD;;AAED,IAAA,QAAQ,CAAC,KAAD,EAAY,CAEnB;;AAzGmB;;;qBAAT,S;AAAS,G;;;WAAT,S;AAAS,IAAA,OAAA,EAAT,SAAS,CAAA;;AAAtB,SAAa,SAAb;AAAA","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Spell } from \"./spell\";\r\n\r\n@Injectable()\r\nexport class Character {\r\n  //stats\r\n  name: string;\r\n  race: string;\r\n  class: string;\r\n  level: number;\r\n  experience: number;\r\n  gold: number;\r\n  piety: number;\r\n  healthPotions: number;\r\n  manaPotions: number;\r\n  baseStrength: number;\r\n  bonusStrength: number;\r\n  currentHealth: number;\r\n  currentMana: number;\r\n  baseHealth: number;\r\n  baseMana: number;\r\n  baseHealthRegen: number\r\n  manaRegen: number;\r\n  healthPotionGain: number;\r\n  manaPotionGain: number;\r\n  permaFirstStrike: boolean;\r\n  spells: Spell[];\r\n  spellSlots: number;\r\n  spellsOnMap: number;\r\n\r\n  // metaData\r\n  pngString: String;\r\n  levelNumberWidth: number;\r\n  levelNumberHeight: number;\r\n\r\n  //temp positive statuses\r\n  firstStrike: boolean;\r\n  bonusStrike: boolean;\r\n  deathDefiance: boolean;\r\n  petrification: boolean;\r\n\r\n  //temp negative statuses\r\n  poisoned: boolean;\r\n  manaBurn: boolean;\r\n  weakened: boolean;\r\n\r\n\r\n\r\n\r\n  constructor() {\r\n    this.name = 'Jared'\r\n    this.race = 'Human'\r\n    this.class = 'Fighter'\r\n    this.level = 3\r\n    this.experience = 7;\r\n    this.gold = 13\r\n    this.piety = 20\r\n    this.healthPotions = 1;\r\n    this.manaPotions = 1\r\n    this.baseStrength = 5;\r\n    this.bonusStrength = 0;\r\n    this.currentHealth = 15\r\n    this.currentMana = 12\r\n    this.baseHealth = 10\r\n    this.baseMana = 12\r\n    this.baseHealthRegen = 1\r\n    this.manaRegen = 1\r\n    this.healthPotionGain = 0.38;\r\n    this.manaPotionGain = 0.35;\r\n    this.permaFirstStrike = false;\r\n    this.spellSlots = 3;\r\n    this.spellsOnMap = 5;\r\n    this.pngString = 'HeroBase';\r\n    this.levelNumberWidth = 6;\r\n    this.levelNumberHeight = 12;\r\n\r\n    this.spells=[];\r\n    for (let i = 0; i < this.spellSlots; i++) {\r\n      this.spells.push(new Spell('empty'));\r\n    }\r\n    \r\n\r\n\r\n  }\r\n\r\n\r\n  getMaxHealth(){\r\n    return this.baseHealth * this.level;\r\n  }\r\n\r\n  getCurrentAttack(){\r\n    return (this.baseStrength * this.level) + this.bonusStrength\r\n  }\r\n\r\n  getMaxExperience(){\r\n    return this.level * 5\r\n  }\r\n\r\n  getHealthRegen(){\r\n    return this.level * this.baseHealthRegen;\r\n  }\r\n\r\n  exploredSquare(){\r\n    (this.currentHealth + this.getHealthRegen() ) > this.getMaxHealth() ? this.currentHealth = this.getMaxHealth() : this.currentHealth += this.getHealthRegen();\r\n    (this.currentMana + this.manaRegen ) > this.baseMana ? this.currentMana = this.baseMana : this.currentMana += this.manaRegen;\r\n  }\r\n\r\n  addSpell(spell:Spell){\r\n\r\n  }\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}