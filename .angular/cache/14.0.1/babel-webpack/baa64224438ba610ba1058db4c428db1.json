{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let Enemy = /*#__PURE__*/(() => {\n  class Enemy {\n    constructor() {\n      this.name = 'Meat Man';\n      this.type = 'Normal';\n      this.level = 3;\n      this.strength = 5;\n      this.bonusStrength = 0;\n      this.currentHealth = 15;\n      this.baseHealth = 10;\n      this.baseHealthRegen = 1;\n      this.permaFirstStrike = false;\n    }\n\n    getMaxHealth() {\n      return this.baseHealth * this.level;\n    }\n\n    getCurrentAttack() {\n      return this.strength + this.bonusStrength;\n    }\n\n    getHealthRegen() {\n      return this.level * this.baseHealthRegen;\n    }\n\n    getLevelColor(character) {\n      if (this.level == 10) {\n        return 'Red';\n      }\n\n      if (character != null && character.level != null) {\n        let difference = character.level - this.level;\n\n        switch (difference) {\n          case -8:\n            return 'Orange';\n\n          case -7:\n            return 'Orange';\n\n          case -6:\n            return 'Orange';\n\n          case -5:\n            return 'Orange';\n\n          case -4:\n            return 'Yellow';\n\n          case -3:\n            return 'Yellow';\n\n          case -2:\n            return 'Yellow';\n\n          case -1:\n            return 'Green';\n\n          case 0:\n            return 'Green';\n\n          case 1:\n            return 'Green';\n\n          case 2:\n            return 'Green';\n\n          case 3:\n            return 'Green';\n\n          case 4:\n            return 'Green';\n\n          case 5:\n            return 'Green';\n\n          case 6:\n            return 'Green';\n\n          case 7:\n            return 'Green';\n\n          case 8:\n            return 'Green';\n\n          case 9:\n            return 'Green';\n\n          default:\n            break;\n        }\n      }\n\n      return 'Green';\n    }\n\n  }\n\n  Enemy.ɵfac = function Enemy_Factory(t) {\n    return new (t || Enemy)();\n  };\n\n  Enemy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Enemy,\n    factory: Enemy.ɵfac\n  });\n  return Enemy;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\models\\enemy.ts"],"names":[],"mappings":";AAGA,WAAa,KAAb;AAAM,QAAO,KAAP,CAAY;AAyBhB,IAAA,WAAA,GAAA;AACE,WAAK,IAAL,GAAY,UAAZ;AACA,WAAK,IAAL,GAAY,QAAZ;AACA,WAAK,KAAL,GAAa,CAAb;AACA,WAAK,QAAL,GAAgB,CAAhB;AACA,WAAK,aAAL,GAAqB,CAArB;AACA,WAAK,aAAL,GAAqB,EAArB;AACA,WAAK,UAAL,GAAkB,EAAlB;AACA,WAAK,eAAL,GAAuB,CAAvB;AACA,WAAK,gBAAL,GAAwB,KAAxB;AAGD;;AAGD,IAAA,YAAY,GAAA;AACV,aAAO,KAAK,UAAL,GAAkB,KAAK,KAA9B;AACD;;AAED,IAAA,gBAAgB,GAAA;AACd,aAAO,KAAK,QAAL,GAAgB,KAAK,aAA5B;AACD;;AAED,IAAA,cAAc,GAAA;AACZ,aAAO,KAAK,KAAL,GAAa,KAAK,eAAzB;AACD;;AAED,IAAA,aAAa,CAAC,SAAD,EAAU;AACrB,UAAG,KAAK,KAAL,IAAc,EAAjB,EAAoB;AAClB,eAAO,KAAP;AACD;;AACD,UAAI,SAAS,IAAI,IAAb,IAAqB,SAAS,CAAC,KAAV,IAAmB,IAA5C,EAAkD;AAChD,YAAI,UAAU,GAAG,SAAS,CAAC,KAAV,GAAkB,KAAK,KAAxC;;AACA,gBAAQ,UAAR;AACE,eAAK,CAAC,CAAN;AACE,mBAAO,QAAP;;AACF,eAAK,CAAC,CAAN;AACE,mBAAO,QAAP;;AACF,eAAK,CAAC,CAAN;AACE,mBAAO,QAAP;;AACF,eAAK,CAAC,CAAN;AACE,mBAAO,QAAP;;AACF,eAAK,CAAC,CAAN;AACE,mBAAO,QAAP;;AACF,eAAK,CAAC,CAAN;AACE,mBAAO,QAAP;;AACF,eAAK,CAAC,CAAN;AACE,mBAAO,QAAP;;AACF,eAAK,CAAC,CAAN;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF,eAAK,CAAL;AACE,mBAAO,OAAP;;AACF;AACE;AAtCJ;AAyCD;;AACD,aAAO,OAAP;AACD;;AArGe;;;qBAAL,K;AAAK,G;;;WAAL,K;AAAK,IAAA,OAAA,EAAL,KAAK,CAAA;;AAAlB,SAAa,KAAb;AAAA","sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class Enemy {\r\n  //stats\r\n  name; string;\r\n  type: string;\r\n  level: number;\r\n  strength: number;\r\n  bonusStrength: number;\r\n  currentHealth: number;\r\n  baseHealth: number;\r\n  baseHealthRegen: number\r\n  permaFirstStrike: boolean;\r\n\r\n  deathDefiance: boolean;\r\n  petrification: boolean;\r\n\r\n  // negative statuses\r\n  poisoned: boolean;\r\n  weakened: boolean;\r\n  vulernable: boolean;\r\n  physicalResist: boolean;\r\n  magicResist: boolean;\r\n\r\n\r\n\r\n\r\n  constructor() {\r\n    this.name = 'Meat Man'\r\n    this.type = 'Normal'\r\n    this.level = 3\r\n    this.strength = 5;\r\n    this.bonusStrength = 0;\r\n    this.currentHealth = 15\r\n    this.baseHealth = 10\r\n    this.baseHealthRegen = 1\r\n    this.permaFirstStrike = false;\r\n\r\n\r\n  }\r\n\r\n\r\n  getMaxHealth() {\r\n    return this.baseHealth * this.level;\r\n  }\r\n\r\n  getCurrentAttack() {\r\n    return this.strength + this.bonusStrength\r\n  }\r\n\r\n  getHealthRegen() {\r\n    return this.level * this.baseHealthRegen;\r\n  }\r\n\r\n  getLevelColor(character) {\r\n    if(this.level == 10){\r\n      return 'Red';\r\n    }\r\n    if (character != null && character.level != null) {\r\n      let difference = character.level - this.level;\r\n      switch (difference) {\r\n        case -8:\r\n          return 'Orange';\r\n        case -7:\r\n          return 'Orange';\r\n        case -6:\r\n          return 'Orange';\r\n        case -5:\r\n          return 'Orange';\r\n        case -4:\r\n          return 'Yellow';\r\n        case -3:\r\n          return 'Yellow';\r\n        case -2:\r\n          return 'Yellow';\r\n        case -1:\r\n          return 'Green';\r\n        case 0:\r\n          return 'Green';\r\n        case 1:\r\n          return 'Green';\r\n        case 2:\r\n          return 'Green';\r\n        case 3:\r\n          return 'Green';\r\n        case 4:\r\n          return 'Green';\r\n        case 5:\r\n          return 'Green';\r\n        case 6:\r\n          return 'Green';\r\n        case 7:\r\n          return 'Green';\r\n        case 8:\r\n          return 'Green';\r\n        case 9:\r\n          return 'Green';\r\n        default:\r\n          break;\r\n\r\n      }\r\n    }\r\n    return 'Green';\r\n  }\r\n\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}