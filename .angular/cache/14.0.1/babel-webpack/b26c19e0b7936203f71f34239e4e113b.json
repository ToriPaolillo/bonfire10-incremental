{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./character\";\nexport let Enemy = /*#__PURE__*/(() => {\n  class Enemy {\n    constructor(level, character) {\n      this.pngString = 'MeatMan';\n      this.name = 'Meat Man';\n      this.type = 'Normal';\n      level ? this.level = level : this.level = 8;\n      this.baseStrength = 5;\n      this.bonusStrength = 0;\n      this.baseHealth = 5;\n      this.currentHealth = this.getMaxHealth();\n      this.baseHealthRegen = 1;\n      this.permaFirstStrike = false;\n      level == 10 ? this.levelNumberWidth = 12 : this.levelNumberWidth = 6;\n      this.levelNumberHeight = 10;\n      this.setNextHit(character);\n    }\n\n    getMaxHealth() {\n      return this.baseHealth * this.level;\n    }\n\n    getCurrentAttack() {\n      return this.baseStrength * this.level + this.bonusStrength;\n    }\n\n    getHealthRegen() {\n      return this.level * this.baseHealthRegen;\n    }\n\n    GenerateRandomEnemyType() {}\n\n    setNextHit(character) {\n      let firstStrike = this.whoHasFirstStrike(character);\n\n      if (this.currentHealth <= character.getCurrentAttack() && (character.currentHealth > this.getCurrentAttack() || firstStrike == 'character')) {\n        this.nextHit = 'VICTORY';\n        this.nextHitTextColor = 'green';\n      } else if (character.currentHealth <= this.getCurrentAttack()) {\n        this.nextHit = 'DEATH';\n        this.nextHitTextColor = 'red';\n      } else {\n        this.nextHit = 'SAFE';\n        this.nextHitTextColor = 'yellow';\n      }\n    }\n\n    whoHasFirstStrike(character) {\n      let firstStrike = 'none';\n\n      if (this.permaFirstStrike && !character.firstStrike) {\n        firstStrike = 'enemy';\n      } else if (character.firstStrike) {\n        firstStrike = 'character';\n      }\n\n      return firstStrike;\n    }\n\n    combat(character) {\n      let firstStrike = this.whoHasFirstStrike(character);\n\n      if (!character.permaFirstStrike) {\n        character.firstStrike = false;\n      }\n\n      if (firstStrike == 'character') {\n        this.currentHealth -= character.getCurrentAttack();\n\n        if (this.currentHealth <= 0) {\n          this.currentHealth = 0;\n          return 'enemyDeath';\n        }\n\n        character.currentHealth -= this.getCurrentAttack();\n\n        if (character.currentHealth <= 0) {\n          character.currentHealth = 0;\n          return 'characterDeath';\n        }\n      } else if (firstStrike == 'enemy') {\n        this.currentHealth -= character.getCurrentAttack();\n\n        if (this.currentHealth <= 0) {\n          this.currentHealth = 0;\n          return 'enemyDeath';\n        }\n\n        character.currentHealth -= this.getCurrentAttack();\n\n        if (character.currentHealth <= 0) {\n          character.currentHealth = 0;\n          return 'characterDeath';\n        }\n      } else {\n        character.currentHealth -= this.getCurrentAttack();\n        this.currentHealth -= character.getCurrentAttack();\n\n        if (character.currentHealth <= 0) {\n          character.currentHealth = 0;\n          return 'characterDeath';\n        }\n\n        if (this.currentHealth <= 0) {\n          this.currentHealth = 0;\n          return 'enemyDeath';\n        }\n      }\n\n      this.setNextHit(character);\n    }\n\n  }\n\n  Enemy.ɵfac = function Enemy_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  Enemy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Enemy,\n    factory: Enemy.ɵfac\n  });\n  return Enemy;\n})();","map":{"version":3,"sources":["C:\\Users\\Owner\\Documents\\GitHub\\bonfire10-incremental\\src\\app\\models\\enemy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Character } from \"./character\";\r\n\r\n@Injectable()\r\nexport class Enemy {\r\n  //stats\r\n  name; string;\r\n  type: string;\r\n  level: number;\r\n  baseStrength: number;\r\n  bonusStrength: number;\r\n  currentHealth: number;\r\n  baseHealth: number;\r\n  baseHealthRegen: number\r\n  permaFirstStrike: boolean;\r\n\r\n  deathDefiance: boolean;\r\n  petrification: boolean;\r\n\r\n  // negative statuses\r\n  poisoned: boolean;\r\n  weakened: boolean;\r\n  vulernable: boolean;\r\n  physicalResist: boolean;\r\n  magicResist: boolean;\r\n\r\n  // metaData\r\n  pngString: String;\r\n  levelNumberWidth: number;\r\n  levelNumberHeight: number;\r\n  nextHit: string;\r\n  nextHitTextColor: string;\r\n\r\n\r\n\r\n  constructor(level: number, character: Character) {\r\n    this.pngString = 'MeatMan'\r\n    this.name = 'Meat Man'\r\n    this.type = 'Normal'\r\n    level ? this.level = level : this.level = 8;\r\n    this.baseStrength = 5;\r\n    this.bonusStrength = 0;\r\n    this.baseHealth = 5\r\n    this.currentHealth = this.getMaxHealth();\r\n    this.baseHealthRegen = 1\r\n    this.permaFirstStrike = false;\r\n    level == 10 ? this.levelNumberWidth = 12 : this.levelNumberWidth = 6;\r\n    this.levelNumberHeight = 10;\r\n\r\n    this.setNextHit(character);\r\n\r\n  }\r\n\r\n\r\n  getMaxHealth() {\r\n    return this.baseHealth * this.level;\r\n  }\r\n\r\n  getCurrentAttack() {\r\n    return (this.baseStrength * this.level) + this.bonusStrength\r\n  }\r\n\r\n  getHealthRegen() {\r\n    return this.level * this.baseHealthRegen;\r\n  }\r\n\r\n\r\n  GenerateRandomEnemyType() {\r\n\r\n  }\r\n\r\n  setNextHit(character: Character) {\r\n    let firstStrike = this.whoHasFirstStrike(character);\r\n\r\n    if (this.currentHealth <= character.getCurrentAttack() && (character.currentHealth > this.getCurrentAttack() || firstStrike == 'character')) {\r\n      this.nextHit = 'VICTORY';\r\n      this.nextHitTextColor = 'green'\r\n    } else if (character.currentHealth <= this.getCurrentAttack()) {\r\n      this.nextHit = 'DEATH';\r\n      this.nextHitTextColor = 'red'\r\n    } else {\r\n      this.nextHit = 'SAFE';\r\n      this.nextHitTextColor = 'yellow'\r\n    }\r\n  }\r\n\r\n  whoHasFirstStrike(character: Character) {\r\n    let firstStrike = 'none'\r\n    if (this.permaFirstStrike && !character.firstStrike) {\r\n      firstStrike = 'enemy';\r\n    } else if (character.firstStrike) {\r\n      firstStrike = 'character';\r\n    }\r\n    return firstStrike;\r\n\r\n  }\r\n\r\n  combat(character: Character) {\r\n    let firstStrike = this.whoHasFirstStrike(character);\r\n    \r\n    if (!character.permaFirstStrike) {\r\n      character.firstStrike = false;\r\n    }\r\n\r\n    if (firstStrike == 'character') {\r\n      this.currentHealth -= character.getCurrentAttack();\r\n      if (this.currentHealth <= 0) {\r\n        this.currentHealth = 0;\r\n        return 'enemyDeath'\r\n      }\r\n\r\n      character.currentHealth -= this.getCurrentAttack();\r\n      if (character.currentHealth <= 0) {\r\n        character.currentHealth = 0;\r\n        return 'characterDeath'\r\n      }\r\n\r\n    } else if (firstStrike == 'enemy') {\r\n      this.currentHealth -= character.getCurrentAttack();\r\n      if (this.currentHealth <= 0) {\r\n        this.currentHealth = 0;\r\n        return 'enemyDeath'\r\n      }\r\n\r\n      character.currentHealth -= this.getCurrentAttack();\r\n      if (character.currentHealth <= 0) {\r\n        character.currentHealth = 0;\r\n        return 'characterDeath'\r\n      }\r\n    } else {\r\n      character.currentHealth -= this.getCurrentAttack();\r\n      this.currentHealth -= character.getCurrentAttack();\r\n\r\n      if (character.currentHealth <= 0) {\r\n        character.currentHealth = 0;\r\n        return 'characterDeath'\r\n      }\r\n\r\n      if (this.currentHealth <= 0) {\r\n        this.currentHealth = 0;\r\n        return 'enemyDeath'\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    this.setNextHit(character);\r\n\r\n\r\n  }\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}