{"ast":null,"code":"import { Spell } from \"./spell\";\nimport * as i0 from \"@angular/core\";\nexport let Character = /*#__PURE__*/(() => {\n  class Character {\n    constructor() {\n      this.name = 'Jared';\n      this.race = 'Human';\n      this.class = 'Fighter';\n      this.level = 3;\n      this.experience = 7;\n      this.gold = 13;\n      this.piety = 20;\n      this.healthPotions = 1;\n      this.manaPotions = 1;\n      this.baseStrength = 5;\n      this.bonusStrength = 0;\n      this.currentHealth = 15;\n      this.currentMana = 12;\n      this.baseHealth = 10;\n      this.baseMana = 12;\n      this.baseHealthRegen = 1;\n      this.baseManaRegen = 1;\n      this.healthPotionGain = 0.38;\n      this.manaPotionGain = 0.35;\n      this.permaFirstStrike = false;\n      this.strongStrike = false;\n      this.spellSlots = 3;\n      this.spellsOnMap = 5;\n      this.pngString = 'HeroBase';\n      this.levelNumberWidth = 6;\n      this.levelNumberHeight = 12;\n      this.spells = [];\n\n      for (let i = 0; i < this.spellSlots; i++) {\n        this.spells.push(new Spell('empty'));\n      }\n\n      this.bloodMagic = false;\n      this.combatPreview = false;\n      this.combatPreviewDamage = 0;\n    }\n\n    getMaxHealth() {\n      return this.baseHealth * this.level;\n    }\n\n    getCurrentAttack() {\n      return this.baseStrength * this.level + this.bonusStrength;\n    }\n\n    getMaxExperience() {\n      return this.level * 5;\n    }\n\n    getHealthRegen() {\n      return this.bloodMagic ? 0 : this.level * this.baseHealthRegen;\n    }\n\n    getManaRegen() {\n      return this.bloodMagic ? this.baseManaRegen * 2 : this.baseManaRegen;\n    }\n\n    exploredSquare() {\n      this.currentHealth + this.getHealthRegen() > this.getMaxHealth() ? this.currentHealth = this.getMaxHealth() : this.currentHealth += this.getHealthRegen();\n      this.currentMana + this.getManaRegen() > this.baseMana ? this.currentMana = this.baseMana : this.currentMana += this.getManaRegen();\n    }\n\n    addSpell(newSpell) {\n      let slotFound = false;\n      let newSpellList = []; // this temp variable is necssary because just updating the existing spells variable doesn't trigger ngOnChanges for the Character class. It has to be reset to a new variable\n\n      this.spells.forEach(spell => {\n        if (spell.name == 'empty' && !slotFound) {\n          newSpellList.push(newSpell);\n          slotFound = true;\n        } else {\n          newSpellList.push(spell);\n        }\n      });\n      this.spells = newSpellList;\n    }\n\n    recycleSpell(recSpell) {\n      let i = 0;\n      this.spells.forEach(spell => {\n        if (spell.name == recSpell.name) {\n          this.spells[i] = new Spell('empty');\n        }\n\n        i++;\n      });\n      this.spells;\n      this.spellRecycleBonus();\n    }\n\n    spellRecycleBonus() {}\n\n    spellSlotsOpen() {\n      let slotOpen = false;\n      this.spells.forEach(spell => {\n        if (spell.name == 'empty') {\n          slotOpen = true;\n        }\n      });\n      return slotOpen;\n    }\n\n    killedEnemy(enemy) {\n      let expBoost = enemy.level;\n\n      switch (enemy.level - this.level) {\n        case 0:\n          break;\n\n        case 1:\n          expBoost = enemy.level + 3;\n          break;\n\n        case 2:\n          break;\n\n        case 3:\n          break;\n\n        case 4:\n          break;\n\n        default:\n          break;\n      }\n\n      this.experience += expBoost;\n    }\n\n  }\n\n  Character.ɵfac = function Character_Factory(t) {\n    return new (t || Character)();\n  };\n\n  Character.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Character,\n    factory: Character.ɵfac\n  });\n  return Character;\n})();","map":{"version":3,"sources":["C:\\Users\\Owner\\Documents\\GitHub\\bonfire10-incremental\\src\\app\\models\\character.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Enemy } from \"./enemy\";\r\nimport { Spell } from \"./spell\";\r\n\r\n@Injectable()\r\nexport class Character {\r\n  //stats\r\n  name: string;\r\n  race: string;\r\n  class: string;\r\n  level: number;\r\n  experience: number;\r\n  gold: number;\r\n  piety: number;\r\n  healthPotions: number;\r\n  manaPotions: number;\r\n  baseStrength: number;\r\n  bonusStrength: number;\r\n  currentHealth: number;\r\n  currentMana: number;\r\n  baseHealth: number;\r\n  baseMana: number;\r\n  baseHealthRegen: number\r\n  baseManaRegen: number;\r\n  healthPotionGain: number;\r\n  manaPotionGain: number;\r\n  permaFirstStrike: boolean;\r\n  spells: Spell[];\r\n  spellSlots: number;\r\n  spellsOnMap: number;\r\n\r\n  // metaData\r\n  pngString: String;\r\n  levelNumberWidth: number;\r\n  levelNumberHeight: number;\r\n  combatPreview: boolean;\r\n  combatPreviewDamage: number;\r\n\r\n  //temp positive statuses\r\n  firstStrike: boolean;\r\n  strongStrike: boolean;\r\n  deathDefiance: boolean;\r\n  petrification: boolean;\r\n  bloodMagic: boolean;\r\n\r\n  //temp negative statuses\r\n  poisoned: boolean;\r\n  manaBurn: boolean;\r\n  weakened: boolean;\r\n\r\n\r\n  constructor() {\r\n    this.name = 'Jared'\r\n    this.race = 'Human'\r\n    this.class = 'Fighter'\r\n    this.level = 3\r\n    this.experience = 7;\r\n    this.gold = 13\r\n    this.piety = 20\r\n    this.healthPotions = 1;\r\n    this.manaPotions = 1\r\n    this.baseStrength = 5;\r\n    this.bonusStrength = 0;\r\n    this.currentHealth = 15\r\n    this.currentMana = 12\r\n    this.baseHealth = 10\r\n    this.baseMana = 12\r\n    this.baseHealthRegen = 1\r\n    this.baseManaRegen = 1\r\n    this.healthPotionGain = 0.38;\r\n    this.manaPotionGain = 0.35;\r\n    this.permaFirstStrike = false;\r\n    this.strongStrike = false;\r\n    this.spellSlots = 3;\r\n    this.spellsOnMap = 5;\r\n    this.pngString = 'HeroBase';\r\n    this.levelNumberWidth = 6;\r\n    this.levelNumberHeight = 12;\r\n\r\n    this.spells = [];\r\n    for (let i = 0; i < this.spellSlots; i++) {\r\n      this.spells.push(new Spell('empty'));\r\n    }\r\n\r\n    this.bloodMagic = false;\r\n\r\n    this.combatPreview = false;\r\n    this.combatPreviewDamage = 0;\r\n\r\n\r\n  }\r\n\r\n\r\n  getMaxHealth() {\r\n    return this.baseHealth * this.level;\r\n  }\r\n\r\n  getCurrentAttack() {\r\n    return (this.baseStrength * this.level) + this.bonusStrength\r\n  }\r\n\r\n  getMaxExperience() {\r\n    return this.level * 5\r\n  }\r\n\r\n  getHealthRegen() {\r\n    return this.bloodMagic ? 0 : this.level * this.baseHealthRegen;\r\n  }\r\n\r\n  getManaRegen() {\r\n    return this.bloodMagic ? this.baseManaRegen * 2 : this.baseManaRegen;\r\n  }\r\n\r\n  exploredSquare() {\r\n    (this.currentHealth + this.getHealthRegen()) > this.getMaxHealth() ? this.currentHealth = this.getMaxHealth() : this.currentHealth += this.getHealthRegen();\r\n    (this.currentMana + this.getManaRegen()) > this.baseMana ? this.currentMana = this.baseMana : this.currentMana += this.getManaRegen();\r\n  }\r\n\r\n  addSpell(newSpell: Spell) {\r\n    let slotFound = false;\r\n\r\n    let newSpellList = []; // this temp variable is necssary because just updating the existing spells variable doesn't trigger ngOnChanges for the Character class. It has to be reset to a new variable\r\n    this.spells.forEach(spell => {\r\n      if (spell.name == 'empty' && !slotFound) {\r\n        newSpellList.push(newSpell);\r\n        slotFound = true;\r\n      } else {\r\n        newSpellList.push(spell)\r\n      }\r\n    })\r\n\r\n    this.spells = newSpellList;\r\n  }\r\n\r\n  recycleSpell(recSpell: Spell) {\r\n    let i = 0;\r\n    this.spells.forEach(spell => {\r\n      if (spell.name == recSpell.name) {\r\n        this.spells[i] = new Spell('empty');\r\n      }\r\n      i++;\r\n    })\r\n\r\n    this.spells;\r\n    this.spellRecycleBonus();\r\n  }\r\n\r\n  spellRecycleBonus() {\r\n\r\n  }\r\n\r\n  spellSlotsOpen() {\r\n    let slotOpen = false;\r\n    this.spells.forEach(spell => {\r\n      if (spell.name == 'empty') {\r\n        slotOpen = true;\r\n      }\r\n    });\r\n    return slotOpen;\r\n  }\r\n\r\n  killedEnemy(enemy: Enemy) {\r\n    let expBoost = enemy.level\r\n    switch (enemy.level - this.level) {\r\n      case 0:\r\n        break;\r\n      case 1:\r\n        expBoost = enemy.level + 3\r\n        break;\r\n      case 2:\r\n        break;\r\n      case 3:\r\n        break;\r\n      case 4:\r\n        break;\r\n      default:\r\n        break;\r\n\r\n\r\n\r\n    }\r\n    this.experience += expBoost\r\n  }\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}