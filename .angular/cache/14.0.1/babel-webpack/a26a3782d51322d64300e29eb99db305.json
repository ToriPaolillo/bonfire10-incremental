{"ast":null,"code":"import { Tile } from \"./tile\";\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nexport let GridMatrix = /*#__PURE__*/(() => {\n  class GridMatrix {\n    //20 by 20\n    constructor() {\n      let tiles = [];\n      let initialXCoord = Math.round(Math.random() * 16 + 2);\n      let initialYCoord = Math.round(Math.random() * 16 + 2);\n      tiles.push(new Tile(true, false, true, 'player', initialXCoord, initialYCoord)); // Spells\n\n      for (let i = 0; i < 5; i++) {\n        tiles.push(new Tile(false, false, true, 'spell'));\n      } // Gold\n\n\n      for (let i = 0; i < 7; i++) {\n        tiles.push(new Tile(false, false, true, 'gold'));\n      } // stat boosts\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'attackBoost'));\n        tiles.push(new Tile(false, false, true, 'healthBoost'));\n        tiles.push(new Tile(false, false, true, 'manaBoost'));\n      } // shops\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'shop'));\n      } // churches\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'altar'));\n      } // potions\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'healthPotion'));\n        tiles.push(new Tile(false, false, true, 'manaPotion'));\n      } // level 1\n\n\n      for (let i = 0; i < 10; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy1'));\n      } // level 2\n\n\n      for (let i = 0; i < 5; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy2'));\n      } // level 3\n\n\n      for (let i = 0; i < 4; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy3'));\n      } // level 4, 5, 6, 7, 8\n\n\n      for (let i = 0; i < 3; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy4'));\n        tiles.push(new Tile(false, false, true, 'enemy5'));\n        tiles.push(new Tile(false, false, true, 'enemy6'));\n        tiles.push(new Tile(false, false, true, 'enemy7'));\n        tiles.push(new Tile(false, false, true, 'enemy8'));\n      } // level 9\n\n\n      for (let i = 0; i < 2; i++) {\n        tiles.push(new Tile(false, false, true, 'enemy9'));\n      } // level 10\n\n\n      tiles.push(new Tile(false, false, true, 'enemy10')); // explorable wall tiles\n\n      for (let i = 0; i < 150; i++) {\n        let newtile = new Tile(false, false, false, 'wall');\n        tiles.push(newtile);\n      } // unexplorable wall tiles\n\n\n      for (let i = 0; i < 50; i++) {\n        let newtile = new Tile(false, false, false, 'wall');\n        tiles.push(newtile);\n      }\n\n      let remaining = 400 - tiles.length; // walkable empty tiles\n\n      for (let i = 0; i < remaining; i++) {\n        let newtile = new Tile(false, false, true);\n        tiles.push(newtile);\n      }\n\n      let walkableList = _.filter(tiles, function (tile) {\n        return tile.walkable;\n      });\n\n      let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\n      walkableCoords.forEach(coordinate => {\n        if (!(coordinate.xCoord == initialXCoord && coordinate.yCoord == initialYCoord)) {\n          let unsetTiles = _.filter(walkableList, function (tile) {\n            return tile.walkable && tile.xCoord == null && tile.yCoord == null;\n          });\n\n          let newTile = this.getRandomTile(unsetTiles);\n\n          if (this.coordinateTouchingStart(initialXCoord, initialYCoord, coordinate)) {\n            newTile.explored = true;\n          }\n\n          newTile.xCoord = coordinate.xCoord;\n          newTile.yCoord = coordinate.yCoord;\n        }\n      });\n\n      let unwalkableList = _.filter(tiles, function (tile) {\n        return !tile.walkable && tile.xCoord == null && tile.yCoord == null;\n      });\n\n      this.setUnwalkableTileCoords(walkableCoords, unwalkableList);\n      tiles = this.formatMatrix(tiles);\n      this.tileArray = tiles;\n    }\n\n    getRandomTile(tileList) {\n      let randomIndex = Math.round(Math.random() * (tileList.length - 1));\n      let randomTile = tileList[randomIndex];\n\n      if (randomTile.xCoord == null || randomTile.yCoord == null) {\n        return randomTile;\n      }\n    }\n\n    getWalkablePath(xCoord, yCoord, tileNumber) {\n      let tileCoords = [{\n        xCoord: xCoord,\n        yCoord: yCoord\n      }];\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord + 1,\n        yCoord: yCoord\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord - 1\n      });\n      tileCoords.push({\n        xCoord: xCoord,\n        yCoord: yCoord + 1\n      });\n      tileCoords.push({\n        xCoord: xCoord - 1,\n        yCoord: yCoord\n      });\n      let currentCoord; //currentCoord = this.getRandomCoordinate(tileCoords, xCoord, yCoord);\n\n      for (let i = 0; i < tileNumber - 9; i++) {\n        if (i >= 20 && i % 20 == 0) {\n          currentCoord = this.getRandomCoordinate(tileCoords, true);\n        } else {\n          currentCoord = this.getRandomCoordinate(tileCoords, false);\n        }\n\n        let expansionCoordinate = this.getNewCoordinate(xCoord, yCoord, currentCoord, tileCoords, 0);\n        currentCoord = expansionCoordinate;\n        tileCoords.push(expansionCoordinate);\n      }\n\n      return tileCoords;\n    } // getRandomCoordinate(coordinates, xCoord, yCoord) {\n    //     let startPosition = Math.round(Math.random() * 3);\n    //     let currentCoord;\n    //     switch (startPosition) {\n    //         case 0:\n    //             currentCoord = { xCoord: xCoord + 1, yCoord: yCoord };\n    //             break;\n    //         case 1:\n    //             currentCoord = { xCoord: xCoord - 1, yCoord: yCoord };\n    //             break;\n    //         case 2:\n    //             currentCoord = { xCoord: xCoord, yCoord: yCoord + 1 };\n    //             break;\n    //         case 3:\n    //             currentCoord = { xCoord: xCoord, yCoord: yCoord - 1 };\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    //     let surrounded = this.isSurrounded(currentCoord, coordinates);\n    //     return currentCoord;\n    // }\n\n\n    getRandomCoordinate(coordinates, refresh) {\n      let currentCoordIndex = coordinates.length - 1 - Math.round(Math.random() * 4);\n\n      if (refresh) {\n        currentCoordIndex = Math.round(Math.random() * (coordinates.length - 15));\n      }\n\n      let currentCoord = coordinates[currentCoordIndex];\n      let surrounded = this.isSurrounded(currentCoord, coordinates);\n\n      if (surrounded) {\n        return this.getRandomCoordinate(coordinates, refresh);\n      } else {\n        return currentCoord;\n      }\n    }\n\n    isSurrounded(currentCoord, coordinates) {\n      let surrounded = (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord + 1 > 19) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.xCoord - 1 < 0 || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord - 1 < 0) && (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord + 1 > 19 || currentCoord.xCoord - 1 < 0);\n      return surrounded;\n    }\n\n    coordinateTouchingStart(initialXCoord, initialYCoord, coordinate) {\n      if ((coordinate.xCoord == initialXCoord + 1 || coordinate.xCoord == initialXCoord - 1 || coordinate.xCoord == initialXCoord) && (coordinate.yCoord == initialYCoord + 1 || coordinate.yCoord == initialYCoord - 1 || coordinate.yCoord == initialYCoord)) {\n        return true;\n      }\n\n      return false;\n    }\n\n    getNewCoordinate(xCoord, yCoord, currentCoord, coordinates, recursionCount) {\n      let xBias = 1;\n      let yBias = 1;\n      let xBiasPos = false;\n      let xBiasNeg = false;\n      let yBiasPos = false;\n      let yBiasNeg = false;\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord + 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord == 19) {\n        xBiasNeg = true;\n        xBias = -1;\n      }\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord - 1,\n        yCoord: currentCoord.yCoord\n      }) != null || currentCoord.xCoord == 0) {\n        xBias = 1;\n        xBiasPos = true;\n      }\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord + 1\n      }) != null || currentCoord.yCoord == 19) {\n        yBias = -1;\n        yBiasNeg = true;\n      }\n\n      if (_.find(coordinates, {\n        xCoord: currentCoord.xCoord,\n        yCoord: currentCoord.yCoord - 1\n      }) != null || currentCoord.yCoord == 0) {\n        yBias = 1;\n        yBiasPos = true;\n      }\n\n      let xRand = Math.random();\n      let yRand = Math.random();\n\n      if (xBiasNeg && xBiasPos) {\n        if (xRand > 0.85) {\n          xBias = xBias * -1;\n        }\n\n        if (xRand < 0.70) {\n          xBias = xBias * 0;\n        }\n      } else {\n        if (xRand > 0.80) {\n          xBias = xBias * -1;\n        }\n\n        if (xRand < 0.20) {\n          xBias = xBias * 0;\n        }\n      }\n\n      if (yBiasNeg && yBiasPos) {\n        if (yRand > 0.85) {\n          yBias = yBias * -1;\n        }\n\n        if (xRand < 0.70) {\n          yBias = yBias * 0;\n        }\n      } else {\n        if (yRand > 0.80) {\n          yBias = yBias * -1;\n        }\n\n        if (yRand < 0.20) {\n          yBias = yBias * 0;\n        }\n      }\n\n      let newXCoord = currentCoord.xCoord + xBias;\n      let newYCoord = currentCoord.yCoord + yBias;\n\n      let included = _.find(coordinates, {\n        xCoord: newXCoord,\n        yCoord: newYCoord\n      });\n\n      if (currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\n        return this.getNewCoordinate(xCoord, yCoord, currentCoord, coordinates, recursionCount + 1);\n      } else {\n        return {\n          xCoord: newXCoord,\n          yCoord: newYCoord\n        };\n      }\n    } // getNewCoordinate(xCoord, yCoord, currentCoord, coordinates) {\n    //     let xBias = 1\n    //     let yBias = 1\n    //     if (xCoord - (currentCoord.xCoord + 1) > xCoord - (currentCoord.xCoord - 1)) {\n    //         xBias = 0.6;\n    //     }\n    //     if (xCoord - (currentCoord.xCoord + 1) < xCoord - (currentCoord.xCoord - 1)) {\n    //         xBias = 1.4;\n    //     }\n    //     if (yCoord - (currentCoord.yCoord + 1) > yCoord - (currentCoord.yCoord - 1)) {\n    //         yBias = 0.6;\n    //     }\n    //     if (yCoord - (currentCoord.yCoord + 1) < yCoord - (currentCoord.yCoord - 1)) {\n    //         yBias = 1.4;\n    //     }\n    //     let newXCoord = currentCoord.xCoord + Math.round((Math.random() * 2) - xBias);\n    //     let newYCoord = currentCoord.yCoord + Math.round((Math.random() * 2) - yBias);\n    //     let included = _.find(coordinates, { xCoord: newXCoord, yCoord: newYCoord });\n    //     if ((currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord) || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\n    //         return this.getNewCoordinate(xCoord, yCoord, currentCoord, coordinates);\n    //     } else {\n    //         return { xCoord: newXCoord, yCoord: newYCoord }\n    //     }\n    // }\n\n\n    setUnwalkableTileCoords(walkableCoords, unwalkableTiles) {\n      let unwalkableCoords = [];\n\n      for (let i = 0; i < 20; i++) {\n        for (let j = 0; j < 20; j++) {\n          if (_.find(walkableCoords, {\n            xCoord: i,\n            yCoord: j\n          }) == null) {\n            unwalkableCoords.push({\n              xCoord: i,\n              yCoord: j\n            });\n          }\n        }\n      }\n\n      for (let i = 0; i < unwalkableTiles.length; i++) {\n        unwalkableTiles[i].xCoord = unwalkableCoords[i].xCoord;\n        unwalkableTiles[i].yCoord = unwalkableCoords[i].yCoord;\n      }\n    }\n\n    formatMatrix(tiles) {\n      let tileArray = [];\n\n      for (let i = 0; i < 20; i++) {\n        let innerArray = [];\n\n        for (let j = 0; j < 20; j++) {\n          tiles.forEach(tile => {\n            if (tile.xCoord == i && tile.yCoord == j) {\n              innerArray.push(tile);\n            }\n          });\n        }\n\n        tileArray.push(innerArray);\n      }\n\n      return tileArray;\n    }\n\n    clickedTile(clickedTile) {\n      this.tileArray.forEach(row => {\n        row.forEach(tile => {\n          if (tile.contents == 'player') {\n            tile.contents = null;\n          }\n        });\n      });\n      clickedTile.contents = 'player';\n      let x = clickedTile.xCoord;\n      let y = clickedTile.yCoord;\n      let top = true;\n      let bot = true;\n      let left = true;\n      let right = true;\n\n      if (x + 1 > 19) {\n        right = false;\n      }\n\n      if (x - 1 < 0) {\n        left = false;\n      }\n\n      if (y + 1 > 19) {\n        top = false;\n      }\n\n      if (y - 1 < 0) {\n        bot = false;\n      }\n\n      if (right) {\n        this.tileArray[x + 1][y].explored = true;\n\n        if (top) {\n          this.tileArray[x + 1][y + 1].explored = true;\n        }\n\n        if (bot) {\n          this.tileArray[x + 1][y - 1].explored = true;\n        }\n      }\n\n      if (left) {\n        this.tileArray[x - 1][y].explored = true;\n\n        if (top) {\n          this.tileArray[x - 1][y + 1].explored = true;\n        }\n\n        if (bot) {\n          this.tileArray[x - 1][y - 1].explored = true;\n        }\n      }\n\n      if (top) {\n        this.tileArray[x][y + 1].explored = true;\n      }\n\n      if (top) {\n        this.tileArray[x][y - 1].explored = true;\n      }\n    }\n\n  }\n\n  GridMatrix.ɵfac = function GridMatrix_Factory(t) {\n    return new (t || GridMatrix)();\n  };\n\n  GridMatrix.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GridMatrix,\n    factory: GridMatrix.ɵfac\n  });\n  return GridMatrix;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\models\\gridMatrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Tile } from \"./tile\";\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable()\r\nexport class GridMatrix {\r\n    tileArray;\r\n\r\n    //20 by 20\r\n\r\n    constructor() {\r\n\r\n        let tiles = [];\r\n        let initialXCoord = Math.round(Math.random() * 16 + 2);\r\n        let initialYCoord = Math.round(Math.random() * 16 + 2);\r\n        tiles.push(new Tile(true, false, true, 'player', initialXCoord, initialYCoord))\r\n\r\n        // Spells\r\n        for (let i = 0; i < 5; i++) {\r\n            tiles.push(new Tile(false, false, true, 'spell'));\r\n        }\r\n        // Gold\r\n        for (let i = 0; i < 7; i++) {\r\n            tiles.push(new Tile(false, false, true, 'gold'));\r\n        }\r\n        // stat boosts\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'attackBoost'));\r\n            tiles.push(new Tile(false, false, true, 'healthBoost'));\r\n            tiles.push(new Tile(false, false, true, 'manaBoost'));\r\n        }\r\n        // shops\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'shop'));\r\n        }\r\n        // churches\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'altar'));\r\n        }\r\n        // potions\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'healthPotion'));\r\n            tiles.push(new Tile(false, false, true, 'manaPotion'));\r\n        }\r\n\r\n        // level 1\r\n        for (let i = 0; i < 10; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy1'));\r\n        }\r\n        // level 2\r\n        for (let i = 0; i < 5; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy2'));\r\n        }\r\n        // level 3\r\n        for (let i = 0; i < 4; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy3'));\r\n        }\r\n        // level 4, 5, 6, 7, 8\r\n        for (let i = 0; i < 3; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy4'));\r\n            tiles.push(new Tile(false, false, true, 'enemy5'));\r\n            tiles.push(new Tile(false, false, true, 'enemy6'));\r\n            tiles.push(new Tile(false, false, true, 'enemy7'));\r\n            tiles.push(new Tile(false, false, true, 'enemy8'));\r\n        }\r\n        // level 9\r\n        for (let i = 0; i < 2; i++) {\r\n            tiles.push(new Tile(false, false, true, 'enemy9'));\r\n        }\r\n        // level 10\r\n        tiles.push(new Tile(false, false, true, 'enemy10'));\r\n\r\n        // explorable wall tiles\r\n        for (let i = 0; i < 150; i++) {\r\n            let newtile = new Tile(false, false, false, 'wall');\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // unexplorable wall tiles\r\n        for (let i = 0; i < 50; i++) {\r\n            let newtile = new Tile(false, false, false, 'wall');\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        let remaining = 400 - tiles.length;\r\n        // walkable empty tiles\r\n        for (let i = 0; i < remaining; i++) {\r\n            let newtile = new Tile(false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n\r\n\r\n        let walkableList = _.filter(tiles, function (tile) {\r\n            return tile.walkable\r\n        });\r\n\r\n        let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\r\n\r\n        walkableCoords.forEach(coordinate => {\r\n            if (!(coordinate.xCoord == initialXCoord && coordinate.yCoord == initialYCoord)) {\r\n                let unsetTiles = _.filter(walkableList, function (tile) {\r\n                    return tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n                });\r\n                let newTile = this.getRandomTile(unsetTiles)\r\n                if (this.coordinateTouchingStart(initialXCoord, initialYCoord, coordinate)) {\r\n                    newTile.explored = true;\r\n                }\r\n                newTile.xCoord = coordinate.xCoord;\r\n                newTile.yCoord = coordinate.yCoord;\r\n            }\r\n        })\r\n\r\n        let unwalkableList = _.filter(tiles, function (tile) {\r\n            return !tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n        });\r\n\r\n\r\n\r\n        this.setUnwalkableTileCoords(walkableCoords, unwalkableList);\r\n        tiles = this.formatMatrix(tiles);\r\n\r\n\r\n        this.tileArray = tiles;\r\n    }\r\n\r\n    getRandomTile(tileList) {\r\n        let randomIndex = Math.round(Math.random() * (tileList.length - 1))\r\n        let randomTile = tileList[randomIndex];\r\n        if (randomTile.xCoord == null || randomTile.yCoord == null) {\r\n            return randomTile\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private getWalkablePath(xCoord, yCoord, tileNumber) {\r\n        let tileCoords = [{ xCoord: xCoord, yCoord: yCoord }];\r\n\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord + 1, yCoord: yCoord });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord - 1 });\r\n        tileCoords.push({ xCoord: xCoord, yCoord: yCoord + 1 });\r\n        tileCoords.push({ xCoord: xCoord - 1, yCoord: yCoord });\r\n\r\n\r\n\r\n        let currentCoord;\r\n        //currentCoord = this.getRandomCoordinate(tileCoords, xCoord, yCoord);\r\n\r\n        for (let i = 0; i < tileNumber - 9; i++) {\r\n            if (i >= 20 && i % 20 == 0) {\r\n                currentCoord = this.getRandomCoordinate(tileCoords, true);\r\n            } else {\r\n                currentCoord = this.getRandomCoordinate(tileCoords, false);\r\n            }\r\n\r\n\r\n\r\n            let expansionCoordinate = this.getNewCoordinate(xCoord, yCoord, currentCoord, tileCoords, 0);\r\n            currentCoord = expansionCoordinate;\r\n            tileCoords.push(expansionCoordinate);\r\n        }\r\n\r\n        return tileCoords;\r\n    }\r\n\r\n\r\n\r\n    // getRandomCoordinate(coordinates, xCoord, yCoord) {\r\n    //     let startPosition = Math.round(Math.random() * 3);\r\n\r\n    //     let currentCoord;\r\n    //     switch (startPosition) {\r\n    //         case 0:\r\n    //             currentCoord = { xCoord: xCoord + 1, yCoord: yCoord };\r\n    //             break;\r\n    //         case 1:\r\n    //             currentCoord = { xCoord: xCoord - 1, yCoord: yCoord };\r\n    //             break;\r\n    //         case 2:\r\n    //             currentCoord = { xCoord: xCoord, yCoord: yCoord + 1 };\r\n    //             break;\r\n    //         case 3:\r\n    //             currentCoord = { xCoord: xCoord, yCoord: yCoord - 1 };\r\n    //             break;\r\n    //         default:\r\n    //             break;\r\n    //     }\r\n\r\n\r\n    //     let surrounded = this.isSurrounded(currentCoord, coordinates);\r\n    //     return currentCoord;\r\n\r\n    // }\r\n\r\n    getRandomCoordinate(coordinates, refresh) {\r\n        let currentCoordIndex = (coordinates.length - 1) - Math.round(Math.random() * 4);\r\n\r\n        if (refresh) {\r\n            currentCoordIndex = Math.round(Math.random() * (coordinates.length - 15));\r\n        }\r\n        let currentCoord = coordinates[currentCoordIndex]\r\n\r\n\r\n        let surrounded = this.isSurrounded(currentCoord, coordinates);\r\n\r\n\r\n        if (surrounded) {\r\n            return this.getRandomCoordinate(coordinates, refresh);\r\n        } else {\r\n            return currentCoord;\r\n        }\r\n    }\r\n\r\n    isSurrounded(currentCoord, coordinates) {\r\n        let surrounded =\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord + 1 > 19) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.xCoord - 1 < 0 || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.xCoord + 1 > 19 || currentCoord.yCoord - 1 < 0) &&\r\n            (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord + 1 > 19 || currentCoord.xCoord - 1 < 0);\r\n\r\n        return surrounded;\r\n    }\r\n\r\n    coordinateTouchingStart(initialXCoord, initialYCoord, coordinate) {\r\n        if ((coordinate.xCoord == initialXCoord + 1 ||\r\n            coordinate.xCoord == initialXCoord - 1 ||\r\n            coordinate.xCoord == initialXCoord) &&\r\n            (coordinate.yCoord == initialYCoord + 1 ||\r\n                coordinate.yCoord == initialYCoord - 1 ||\r\n                coordinate.yCoord == initialYCoord)\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getNewCoordinate(xCoord, yCoord, currentCoord, coordinates, recursionCount) {\r\n\r\n        let xBias = 1;\r\n        let yBias = 1;\r\n        let xBiasPos = false;\r\n        let xBiasNeg = false;\r\n        let yBiasPos = false;\r\n        let yBiasNeg = false;\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord + 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord == 19) {\r\n            xBiasNeg = true;\r\n            xBias = - 1\r\n        }\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord - 1, yCoord: currentCoord.yCoord }) != null || currentCoord.xCoord == 0) {\r\n            xBias = 1\r\n            xBiasPos = true;\r\n        }\r\n\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord + 1 }) != null || currentCoord.yCoord == 19) {\r\n            yBias = - 1\r\n            yBiasNeg = true;\r\n        }\r\n        if (_.find(coordinates, { xCoord: currentCoord.xCoord, yCoord: currentCoord.yCoord - 1 }) != null || currentCoord.yCoord == 0) {\r\n            yBias = 1\r\n            yBiasPos = true;\r\n        }\r\n\r\n        let xRand = Math.random();\r\n        let yRand = Math.random();\r\n        if (xBiasNeg && xBiasPos) {\r\n            if (xRand > 0.85) {\r\n                xBias = xBias * - 1;\r\n            }\r\n            if (xRand < 0.70) {\r\n                xBias = xBias * 0;\r\n            }\r\n        } else {\r\n            if (xRand > 0.80) {\r\n                xBias = xBias * - 1;\r\n            }\r\n            if (xRand < 0.20) {\r\n                xBias = xBias * 0;\r\n            }\r\n        }\r\n\r\n\r\n        if (yBiasNeg && yBiasPos) {\r\n            if (yRand > 0.85) {\r\n                yBias = yBias * - 1;\r\n            }\r\n            if (xRand < 0.70) {\r\n                yBias = yBias * 0;\r\n            }\r\n        } else {\r\n            if (yRand > 0.80) {\r\n                yBias = yBias * - 1;\r\n            }\r\n            if (yRand < 0.20) {\r\n                yBias = yBias * 0;\r\n            }\r\n        }\r\n\r\n        let newXCoord = currentCoord.xCoord + xBias\r\n        let newYCoord = currentCoord.yCoord + yBias\r\n\r\n\r\n        let included = _.find(coordinates, { xCoord: newXCoord, yCoord: newYCoord });\r\n        if ((currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord) || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\r\n            return this.getNewCoordinate(xCoord, yCoord, currentCoord, coordinates, recursionCount+1);\r\n        } else {\r\n            return { xCoord: newXCoord, yCoord: newYCoord }\r\n        }\r\n    }\r\n\r\n    // getNewCoordinate(xCoord, yCoord, currentCoord, coordinates) {\r\n    //     let xBias = 1\r\n    //     let yBias = 1\r\n\r\n    //     if (xCoord - (currentCoord.xCoord + 1) > xCoord - (currentCoord.xCoord - 1)) {\r\n    //         xBias = 0.6;\r\n    //     }\r\n    //     if (xCoord - (currentCoord.xCoord + 1) < xCoord - (currentCoord.xCoord - 1)) {\r\n    //         xBias = 1.4;\r\n    //     }\r\n    //     if (yCoord - (currentCoord.yCoord + 1) > yCoord - (currentCoord.yCoord - 1)) {\r\n    //         yBias = 0.6;\r\n    //     }\r\n    //     if (yCoord - (currentCoord.yCoord + 1) < yCoord - (currentCoord.yCoord - 1)) {\r\n    //         yBias = 1.4;\r\n    //     }\r\n\r\n\r\n\r\n    //     let newXCoord = currentCoord.xCoord + Math.round((Math.random() * 2) - xBias);\r\n    //     let newYCoord = currentCoord.yCoord + Math.round((Math.random() * 2) - yBias);\r\n\r\n\r\n    //     let included = _.find(coordinates, { xCoord: newXCoord, yCoord: newYCoord });\r\n    //     if ((currentCoord.xCoord == newXCoord && currentCoord.yCoord == newYCoord) || included != null || newXCoord > 19 || newXCoord < 0 || newYCoord > 19 || newYCoord < 0) {\r\n    //         return this.getNewCoordinate(xCoord, yCoord, currentCoord, coordinates);\r\n    //     } else {\r\n    //         return { xCoord: newXCoord, yCoord: newYCoord }\r\n    //     }\r\n    // }\r\n\r\n\r\n    setUnwalkableTileCoords(walkableCoords, unwalkableTiles) {\r\n        let unwalkableCoords = [];\r\n        for (let i = 0; i < 20; i++) {\r\n            for (let j = 0; j < 20; j++) {\r\n                if (_.find(walkableCoords, { xCoord: i, yCoord: j }) == null) {\r\n                    unwalkableCoords.push({ xCoord: i, yCoord: j })\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < unwalkableTiles.length; i++) {\r\n            unwalkableTiles[i].xCoord = unwalkableCoords[i].xCoord;\r\n            unwalkableTiles[i].yCoord = unwalkableCoords[i].yCoord;\r\n        }\r\n    }\r\n\r\n    formatMatrix(tiles) {\r\n        let tileArray = []\r\n\r\n        for (let i = 0; i < 20; i++) {\r\n            let innerArray = [];\r\n            for (let j = 0; j < 20; j++) {\r\n                tiles.forEach(tile => {\r\n                    if (tile.xCoord == i && tile.yCoord == j) {\r\n                        innerArray.push(tile)\r\n                    }\r\n                })\r\n            }\r\n            tileArray.push(innerArray)\r\n        }\r\n        return tileArray\r\n    }\r\n\r\n\r\n    clickedTile(clickedTile) {\r\n        this.tileArray.forEach(row => {\r\n            row.forEach(tile => {\r\n                if (tile.contents == 'player') {\r\n                    tile.contents = null;\r\n                }\r\n            })\r\n        })\r\n\r\n        clickedTile.contents = 'player'\r\n\r\n        let x = clickedTile.xCoord;\r\n        let y = clickedTile.yCoord;\r\n\r\n        let top = true;\r\n        let bot = true;\r\n        let left = true;\r\n        let right = true;\r\n\r\n        if (x + 1 > 19) {\r\n            right = false\r\n        }\r\n        if (x - 1 < 0) {\r\n            left = false\r\n        }\r\n        if (y + 1 > 19) {\r\n            top = false\r\n        }\r\n        if (y - 1 < 0) {\r\n            bot = false\r\n        }\r\n\r\n        if (right) {\r\n            this.tileArray[x + 1][y].explored = true;\r\n            if (top) {\r\n                this.tileArray[x + 1][y + 1].explored = true;\r\n            }\r\n            if (bot) {\r\n                this.tileArray[x + 1][y - 1].explored = true;\r\n            }\r\n        }\r\n\r\n        if (left) {\r\n            this.tileArray[x - 1][y].explored = true;\r\n            if (top) {\r\n                this.tileArray[x - 1][y + 1].explored = true;\r\n            }\r\n            if (bot) {\r\n                this.tileArray[x - 1][y - 1].explored = true;\r\n            }\r\n        }\r\n\r\n        if (top) {\r\n            this.tileArray[x][y + 1].explored = true;\r\n        }\r\n\r\n        if (top) {\r\n            this.tileArray[x][y - 1].explored = true;\r\n        }\r\n    }\r\n\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}