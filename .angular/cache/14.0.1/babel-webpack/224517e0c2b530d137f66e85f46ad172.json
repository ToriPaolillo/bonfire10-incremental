{"ast":null,"code":"import { Tile } from \"./tile\";\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nexport let GridMatrix = /*#__PURE__*/(() => {\n  class GridMatrix {\n    //20 by 20\n    constructor() {\n      let tiles = [];\n      let initialXCoord = Math.random() * 16 + 2;\n      let initialYCoord = Math.random() * 16 + 2;\n      tiles.push(new Tile(true, false, false, true, 'player', initialXCoord, initialYCoord)); // walkable empty tiles\n\n      for (let i = 0; i < 180; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // Spells\n\n\n      for (let i = 0; i < 5; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // Gold\n\n\n      for (let i = 0; i < 7; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // stat boosts\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // stores\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // churches\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // potions\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 1\n\n\n      for (let i = 0; i < 10; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 2\n\n\n      for (let i = 0; i < 5; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 3\n\n\n      for (let i = 0; i < 4; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 4, 5, 6, 7, 8\n\n\n      for (let i = 0; i < 3; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 9\n\n\n      for (let i = 0; i < 2; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      } // level 10\n      // explorable wall tiles\n\n\n      for (let i = 0; i < 170; i++) {\n        let newtile = new Tile(false, false, true, true);\n        tiles.push(newtile);\n      } // unexplorable wall tiles\n\n\n      for (let i = 0; i < 50; i++) {\n        let newtile = new Tile(false, false, true, false);\n        tiles.push(newtile);\n      }\n\n      let remaining = 400 - tiles.length; // walkable empty tiles\n\n      for (let i = 0; i < remaining; i++) {\n        let newtile = new Tile(false, false, false, true);\n        tiles.push(newtile);\n      }\n\n      let walkableList = _.filter(tiles, function (tile) {\n        return tile.walkable && tile.xCoord == null && tile.yCoord == null;\n      });\n\n      let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\n      tiles.forEach(tile => {});\n      this.tileArray = tiles;\n    }\n\n    getWalkablePath(xCoord, yCoord, tiles) {\n      let tileCoords = [];\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n      tileCoords.push(xCoord + 1, yCoord);\n    }\n\n  }\n\n  GridMatrix.ɵfac = function GridMatrix_Factory(t) {\n    return new (t || GridMatrix)();\n  };\n\n  GridMatrix.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GridMatrix,\n    factory: GridMatrix.ɵfac\n  });\n  return GridMatrix;\n})();","map":{"version":3,"sources":["D:\\Documents\\coding\\Incremental_Games\\bonfire10 Incremental\\src\\app\\models\\gridMatrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Tile } from \"./tile\";\r\nimport * as _ from 'lodash';\r\n\r\n@Injectable()\r\nexport class GridMatrix {\r\n    tileArray;\r\n\r\n    //20 by 20\r\n\r\n    constructor() {\r\n\r\n        let tiles = [];\r\n        let initialXCoord  = Math.random() * 16+2;\r\n        let initialYCoord  = Math.random() * 16+2;\r\n        tiles.push(new Tile(true, false, false, true, 'player', initialXCoord, initialYCoord))\r\n\r\n        // walkable empty tiles\r\n        for (let i = 0; i < 180; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // Spells\r\n        for (let i = 0; i < 5; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // Gold\r\n        for (let i = 0; i < 7; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // stat boosts\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // stores\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // churches\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // potions\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // level 1\r\n        for (let i = 0; i < 10; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 2\r\n        for (let i = 0; i < 5; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 3\r\n        for (let i = 0; i < 4; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 4, 5, 6, 7, 8\r\n        for (let i = 0; i < 3; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 9\r\n        for (let i = 0; i < 2; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n        // level 10\r\n\r\n        // explorable wall tiles\r\n        for (let i = 0; i < 170; i++) {\r\n            let newtile = new Tile(false, false, true, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        // unexplorable wall tiles\r\n        for (let i = 0; i < 50; i++) {\r\n            let newtile = new Tile(false, false, true, false);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n        let remaining = 400 - tiles.length;\r\n        // walkable empty tiles\r\n        for (let i = 0; i < remaining; i++) {\r\n            let newtile = new Tile(false, false, false, true);\r\n            tiles.push(newtile);\r\n        }\r\n\r\n\r\n\r\n        let walkableList = _.filter(tiles, function(tile){\r\n            return tile.walkable && tile.xCoord == null && tile.yCoord == null\r\n        });\r\n\r\n        let walkableCoords = this.getWalkablePath(initialXCoord, initialYCoord, walkableList.length);\r\n\r\n        tiles.forEach(tile =>{\r\n\r\n        })\r\n        \r\n\r\n        this.tileArray = tiles;\r\n    }\r\n\r\n\r\n\r\n    private getWalkablePath(xCoord, yCoord, tiles){\r\n        let tileCoords = [];\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n        tileCoords.push(xCoord+1,yCoord);\r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}